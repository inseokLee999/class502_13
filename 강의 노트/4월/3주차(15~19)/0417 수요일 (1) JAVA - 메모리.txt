this 예약어
this 지역 변수 : 객체의 주소값
-객체의 주소값이 필요한 이유 : 객체의 자원을 접근하기 위한 목적
-변수
	-인스턴스 메서드의 지역변수 : 객체가 되면 호출할 수 있는 메서드
	
	-메서드 내부에서 객체의 자원을 접근하기 위한 주소값
-함수 
	-클래스 내부에서 정의된 생성자를 호출
	-객체 생성 x 생성자에 정의한 코드를 실행 
static 변수
static : 정적인 <-> 동적인 

정적 변수 
- 처음 로드 될 때 부터 공간 할당
- 객체가 생성 되는 것과 관련 x, 처음부터 공간을 할당
- 클래스명으로 직접 접근 가능
- 클래스 변수 라는 명칭으로 도 쓰임

정적 메모리
- 데이터 영역 메모리
- 변하지 않는 데이터
- 코드&상수 영역
- 애플리케이션 시작시 생성, 종료시 제거

동적 메모리
스택, 힙 

static 메서드

- 객체 생성과 상관 없이 사용 가능
- 클래스 명으로 직접 호출 가능
- 클래스 메서드
- this가 존재 하지 않음(인스턴스 메서드는 존재함) 
- 객체의 자원접근 불가 하지만 반대의 경우는 가능

변수의 유효범위
1. 지역변수 
	- 함수가 호출, 실행시에만 스택에서 공간 할당
	- 함수연산 종료 (return), 스택에서 제거 
	- 함수 지역 안에서만 유효한 변수 
2. 멤버변수(인스턴스 변수)
	- 객체 생성시 힙 메모리에 생성되는 변수
	- 객체의 참조가 끊어지면(더 이상 사용하는 참조 변수가 없으면) 가비지 콜렉터(garbage collector)가 제거
3. static 변수 
	- 애플리케이션 로딩 시 처음부터 데이터 영역에 할당 되는 변수
	- 애플리케이션 종료시 제거 되는 변수
static 응용 - 싱글톤 패턴
메모리를 절약하는 방법 패턴

java.lang.Math
	- 수학 관련 편의 기능 모음 클래스
java.util.Arrays
	- 배열을 다룰 때 사용 할 수 있는 편의 기능 모음 클래스
	
편의 기능 모음 클래스의 경우는 객체를 여러개 생성할 필요 X
-> 메서드나, 변수, 상수를 static 으로 정의한 경우가 많다.
-> 문제점?
	static : 처음부터 공간 할당, 활성화 -> 사용하지 않아도 메모리를 차지하는 문제
	->싱글톤 패턴으로 해결
	
객체를 매번 생성하는 경우 : 데이터 클래스 /기능만 사용할 때는 한번만 생성
	
참고) 디자인 패턴

싱글톤 패턴 : 외부에서 생성하지 못하게
1) 기능을 담당하는 객체는 여려개 만들 필요 x 
2) 이 기능이 항상 필요 x, 필요 할 때만 객체 생성
3) 객체는 필요 할 때 하나만 생성, 공유

만드는 방식
1) 생성자를 외부에서 직접 호출 X, 접근 제어자 private 변경
2) 클래스 내부에서 객체를 생성
3) 클래스 내부에서 생성된 객체를 반환하는 함수 생성
	-최초 호출시 정적 변수에 객체를 생성
4) 동시성 작업 : 동기화 처리 // 작업이 끝나면 처리 할 수 있게 나중에 다시 배움

static{
// 클래스가 로드되는 시점부터 실행
// 객체 생성하지 않아도 실행
}