DOM
DomTree
->DOM의 조작 가하면 ->DOMTree ->CSS관계 설정 -> 배치
리액트의 이해

트랜스파일러 
JSX->JS

->개발서버

node.js : 자바스크립트 런타임 - V8

node: 자바스크립트 코드 실행
	node 자바스크립트 파일
	
npm : (node package manager)
	-의존성 관리 (프로젝트에서 필요한 라이브러리)
	-빌드 :  개발소스 -> 서비스 기능상태( 배포가능상태) 로 변경 (리액트 문법 소스 -> js)
	-테스트
	
	install->설치
	npm install 패키지명 -> 설치 현재 프로젝트의 node_modules 폴더에 설치 된다.
	npm -g i 패키지 명
	
	npmjs.org
	
yarn - npm과 동일 역할
	-메타쪽에서 개발
	-설치 속도 빠르다
	-UI
	
	create: 프로젝트 생성
	add 패키지명

- 리액트는 프레임워크가 아닌 V(View)만 신경쓰고 있는 라이브러리
- 그러나 다양한 라이브러리를 조합해서 사용가능

1. 초기 렌더링
- render() 함수

2. 조화과정
1)  Virtual DOM
- Virtual DOM을 이용하면 실제 DOM에 접근하여 조작하는 대신, 이를 추상화한 자바스크립트 객체를 구성하여 사용
- 실제 DOM의 가벼운 사본과 비슷

2) 리액트에서 데이터가 변하여 웹브라우저 실제 DOM을 업데이트 하는 절차 
- 데이터를 업데이트하면 전체 UI를 Virtual DOM에 리렌더링 합니다.
- 이전 Virtual DOM에 있던 내용과 전체 내용을 비교합니다.
- 바뀐 부분만 실제 DOM에 적용합니다.

작업 환경 설정 
1. Node.js 설치 
2. yarn 설치
1) 맥 
	- npm install --global yarn 
	- npm i -g yarn 
	
2) 윈도우즈 
	- yarn 공식 사이트에서 다운로드
	
3. 에디터 설치(vscode)
	- 확장 프로그램 설치
	1) ESLint : 자바스크립트 문법 및 코드 스타일을 검사해주는 도구 
	2) Reactjs Code Snippets : 리액트 사용시 단축 단어를 사용하여 코드 자동완성할 수 있는 도구(제작자가 charalmpos karypidis 인 것 선택)
	3) Prettier-Code formatter : 코드 스타일을 자동으로 정리해 주는 도구
	
	
4. create-react-app으로 프로젝트 생성하기

- yarn create react-app hello-react

- yarn을 사용하지 않는 경우 
(npm init react-app 프로젝트 이름)

npm i ->package.json

10.5.1
10:메이저 버전 : 하위 버전과 호환되지 않은 큰 변화
5:마이너 버전 : 호환성 x, 기능 추가, 변경사항이 있는 경우
1: 패치 : 오류 수정, 보완

참고) npm으로 scripts의 명령어 실행
	npm run start
	npm run build
	
	yarn start
	yart build
	
VS코드 확장 프로그램
1) ESLint : 자바스크립트 문법 및 코드 스타일을 검사해주는 도구 
2) Reactjs Code Snippets : 리액트 사용시 단축 단어를 사용하여 코드 자동완성할 수 있는 도구(제작자가 charalmpos karypidis 인 것 선택)
3) Prettier-Code formatter : 코드 스타일을 자동으로 정리해 주는 도구

SPA Single Page Auto

import:모듈 가져오기
export :모듈 내보내기
JSX
1. 코드 이해하기 
src/App.js


2. JSX란?
- JSX는 자바스크립트의 확장 문법이며 XML과 매우 비슷하게 생김
- 이런 형식으로 작성한 코드는 브라우저에서 실행되기 전에 코드가 번들링되는 과정에서 바벨을 사용하여 일반 자바스크립트 형태의 코드로 변환됩니다.

document.createElement("div");

<div>

JSX 문법 
1. 감싸인 요소
- 반드시 하나의 요소에 의하여 감싸여 있어야 합니다.
- Virtual DOM에서 컴포넌트의 변화를 감지해 낼 때 효율적으로 비교할 수 있도록 컴포넌트 내부는 하나의 DOM 트리 구조로 이루어져야 한다는 규칙 
- Fragment : 태그로 렌더링 X, 감싸는 태그 형태
import {Fragment} from 'react' <Fragment></Fragment>써도되는데 기니까 
=>
<>~</>

참고) 비구조화 할당 
참고) 컴포넌트 : 부분 화면
	함수형 컴포넌트
	- 화살표 함수 권장
	클래스형 컴포넌트



2. 자바스크립트 표현 
- 자바스크립트 표현식을 작성하려면 JSX 내부에서 코드를 { }로 감싸면 됩니다.
{name+'...'}

3. if문 대신 조건부 연산자(삼항조건식)
4. AND 연산자(&&)를 사용한 조건부 렌더링 
5. undefined를 렌더링하지 않기
- 리액트 컴포넌트에서는 함수에서 undefined만 반환하여 렌더링하는 상황을 만들면 안됩니다(오류 발생함)
- 기본값 지정하여 오류 방지

6. 인라인 스타일링 
1) CSS는 객체 형태로 넣어 주어야 함 
2) - 문자가 포함되는 이름이 있을땐 -을 제거하고 카멜 표기법으로 작성 
	background-color 
	
7. class 대신 className 

8. 꼭 닫아야 하는 태그
<input></input>
<input/>
9. 주석
- {/* ... */} 형식으로 작성 
- 시작태그를 여러 줄로 작성할 때는 그 내부에서 // ... 와 같은 형태로 작성할 수 있음 

참고)
- 직접 작성한 파일, 자원을 로드 
import ... from "./..." -> 동일 경로 
import ... from "../..." -> 상위 경로 
import { Fragment } from 'react' -> node_modules/react/index.js 
export: 모듈 내보내기

export default 변수명 -> import 변수명(변경가능) from... : 모듈을 1개만 내보내기 가능

export 변수명 : 모듈을 여러개 내보내기 가능 -> import(변수명) from ...(경로)/변수명은 변경 불가
변수명 as 바꿀이름 하면 가능

./:src에 있는 자원들 불러오기 (우리가 설치한 파일?)
./ 없으면 node_modules에 있다
->WebPack 
	-> index.html,...css, ...js 를 묶어주는게 WebPack

ESLint와 Prettier 적용하기
1. ESLint 
- 보기 > 문제를 클릭하여 확인 

2. Prettier 
- VS Code에서 F1을 누르고 format이라고 입력한 후 Enter를 누르면 자동 정리
- 자동으로 코드 정리를 하려면 
- 파일 -> 기본 설정 -> 설정 -> Format On Save 옵션 체크 : 저장시 자동 정리
- 설정 파일 작성 
.prettierrc

{
	"singleQuote": true,
	"semi": true,
	"useTabs": false,
	"tabWidth": 2
}