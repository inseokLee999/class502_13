컴포넌트의 라이프사이클 메서드

라이프사이클 메서드의 이해
- 라이프사이클 메서드의 종류는 총 아홉 가지
- Will 접두사가 붙은 메서드는 어떤 작업을 작동하기 전에 실행되는 메서드
- Did 접두사가 붙은 메서드는 어떤 작업을 작동한 후에 실행되는 메서드
- 이 메서드들은 컴포넌트 클래스에서 덮어 써 선언함으로써 사용될 수 있습니다.
- 라이프 사이클은 마운트, 업데이트, 언마운트 카테고리로 나눕니다.

1. 마운트
	- DOM이 생성되고 웹 브라우저상에 나타나는 것을 마운트(mount)라고 합니다
	- 마운트할 때 호출하는 메서드
		1) constructor : 컴포넌트를 새로 만들 때마다 호출되는 클래스 생성자 메서드입니다.
			constructor(props) { ... }
			
		2) getDerivedStateFromProps : props에 있는 값을 state에 넣을 때 사용하는 메서드 입니다.
			static getDerivedStateFromProps(nextProps, prevState) {
			if (nextProps.value !== prevState.value) { // 조건에 따라 특정 값 동기화
				return { value: nextProps.value };
			}
			
			return null; // state를 변경할 필요가 없다면 null을 반환 
		}

		3) render : UI를 렌더링 하는 메서드입니다.
			render() { ... }
			
		4) componentDidMount : 컴포넌트가 웹 브라우저상에 나타난 후 호출하는 메서드 입니다.
			componentDidMount() { ... }
		
2. 업데이트
	- 컴포넌트는 다음과 같은 총 네 가지 경우에 업데이트 합니다.
	1) props가 바뀔 때
	2) state가 바뀔 때
	3) 부모 컴포넌트가 리렌더링될 때
	4)  this.forceUpdate로 강제로 렌더링을 트리거할 때
		
	- 컴포넌트는 다양한 이유로 업데이트 될 수 있습니다.
	1) 부모 컴포넌트에서 넘겨주는 props가 바뀔때
	2) 컴포넌트 자신이 들고 있는 state가 setState를 통해 업데이트될 때
	3) 부모 컴포넌트가 리렌더링될 때
	
	- 컴포넌트를 업데이트할 때는 다음 메서드를 호출합니다.
	1)  getDerivedStateFromProps
		- 이 메서드는 마운트 과정에서도 호출되며, 업데이트가 시작되기 전에도 호출
		- props의 변화에 따라 state 값에도 변화를 주고 싶을 때 사용합니다.
	
	2) shouldComponentUpdate
		- 컴포넌트가 리렌더링을 해야 할지 말아야 할지를 결정하는 메서드입니다.
		- true를 반환하면 다음 라이프사이클 메서드를 계속 실행하고, false를 반환하면 작업을 중지합니다. 
		
		shouldComponentUpdate(nextProps, nextState) { ... }
		
	3) render : 컴포넌트를 리렌더링합니다.
	4) getSnapshotBeforeUpdate :  컴포넌트 변화를 DOM에 반영하기 바로 직전에 호출하는 메서드
		getSnapshotBeforeUpdate(prevProps, prevState) {
			if (prevState.array !== this.state.array) {
				const { scrollTop, scrollHeight } = this.list
				
				return { scrollTop, scrollHeight };
			}
		}
		- 이 메서드에서 반환하는 값은 componentDidUpdate에서 세 번째 파라미터인 snapshot 값으로 전달받을 수 있는데, 주로 업데이트하기 직전의 값을 참고할 일이 있을 때 활용
		
	5) componentDidUpdate : 컴포넌트의 업데이트 작업이 끝난 후 호출하는 메서드
		componentDidUpdate(prevProps, prevState, snapshot) { ... }
		1) 리렌더링을 완료한 후 실행합니다.
		2) 업데이트가 끝난 직후이므로 DOM 관련 처리를 해도 무방합니다.
		3) prevProps 또는 prevState를 사용하여 컴포넌트가 이전에 가졌던 데이터에 접근할 수 있습니다.
		4) getSnapshotBeforeUpdate에서 반환한 값이 있다면 snapshot 값을 전달받을 수 있습니다.
		
3. 언마운트
	- 마운트의 반대 과정, 즉 컴포넌트를 DOM에서 제거하는 것을 언마운트(unmount)라고 합니다.
	1) componentWillUnmount : 컴포넌트가 웹 브라우저에서 사라지기 전에 호출하는 메서드 입니다.
	2) 컴포넌트를 DOM에서 제거할 때 실행합니다.
	3) componentDidMount에서 등록한 이벤트 , 타이머, 직접 생성한 DOM이 있다면 여기서 제거 작업을 해야 합니다.
		componentWillUnmount() { ... }

4. componentDidCatch 메서드
	1) 컴포넌트 렌더링 도중에 에러가 발생했을 때 애플리케이션이 먹통이 되지 않고 오류 UI를 보여 줄 수 있게 해 줍니다.
	
	componentDidCatch(error, info) {
		this.setState({
			error: true
		});
		console.log({ error, info });
	}
	
	2) error는 파라미터에 어떤 에러가 발생했는지 알려줍니다.
		.message: 에러 메세지
	3) info 파라미터는 어디에 있는 코드에서 오류가 발생했는지에 대한 정보를 줍니다.
	4) 이 메서드를 사용할 때는 컴포넌트 자신에게 발생하는 에러를 잡아낼 수 없고 자신의 this.props.children으로 전달되는 컴포넌트에서 발생하는 에러만 잡아낼 수 있습니다.
	
	throw 에러 객체 -> 에러 발생
		Error 생성자로 생성한 객체
		
	throw new Error(메세지);-> 에러발생, 실행코드 중단
		에러객체.message : 메세지
		
try{
	//에러가 발생할 가능성이 있는코드 (발생하면 throw...)
	
}catch(에러 객체){
		//에러발생시 처리할 대체 코드에서
}finally{
	//에러 발생하던 안하던 무조건 실행하는 코드
	//로그 기록
}