Hooks

use 로 시작하는 함수

1. UseState
1) useState는 가장 기본적인 Hook이며, 함수 컴포넌트에서도 가변적인 상태를 지닐 수 있게 해 줍니다.
2) 함수 컴포넌트에서 상태를 관리해야 한다면 이 Hook을 사용하면 됩니다.
3)  첫 번째 원소는 상태 값, 두 번째 원소는 상태를 설정하는 함수
	const[items,setItems]=useState(기본값);
4) 상태를 설정하는 함수(두번째 원소)에 파라미터를 넣어서 호출하면 상태값이 변경되고 컴포넌트가 리렌더링 됩니다.
	setItems(값);
	setItems((기존 상태값)=>...);
	
5) useState를 여러 번 사용하기


2. useEffect
1) 리액트 컴포넌트가 렌더링될 때마다 특정 작업을 수행하도록 설정할 수 있는 Hook 
2) 클래스형 컴포넌트의 componentDidMount와 componentDidUpdate를 합친 형태로 보아도 무방
3) 마운트될 때만 실행하고 싶을 때
4) 특정 값이 업데이트될 떄만 실행하고 싶을 때
5) 뒷정리하기
- useEffect는 기본적으로 렌더링되고 난 직후마다 실행되며, 두 번째 파라미터 배열에 무엇을 넣는지에 따라 실행되는 조건이 달라집니다.
- 컴포넌트가 언마운트되기 전이나 업데이트되기 직전에 어떠한 작업을 수행하고 싶다면 useEffect에서 뒷정리(cleanup) 함수를 변환해 주어야 합니다.

3. useReducer
- useState보다 더 다양한 컴포넌트 상황에 따라 다양한 상태를 다른 값으로 업데이트해 주고 싶을 떄 사용하는 Hook
- 리덕스(redux)에서도 비슷하게 사용 : 전역 상태 관리

4. useMemo 함수를 호출 할 때 사용
1) 함수 컴포넌트 내부에서 발생하는 연산을 최적화
	-메모제이션 기법, 캐싱
2) 렌더링하는 과정에서 특정 값이 바뀌었을 때만 연산을 실행하고, 원하는 값이 바뀌지 않았다면 이전에 연산했던 결과를 다시 사용하는 방식

팩토리얼 연산 

5. useCallback : 함수를 재이용 함수를 정의 할 때 사용
1) useCallback은 useMemo와 상당히 비슷한 함수입니다. 주로 렌더링 성능을 최적화해야 하는 상황에서 사용
2) 이 Hook을 사용하면 만들어 놨던 함수를 재사용할 수 있습니다.

6. useRef
1) useRef Hook은 함수 컴포넌트에서 ref를 쉽게 사용할 수 있도록 해 줍니다.
2) 로컬 변수 사용하기
- 로컬 변수란 렌더링과 상관없이 바뀔 수 있는 값을 의미합니다.

부모컴포넌트가 렌더링 -> 자식 컴포넌트도 자동으로 갱신

React.memo(컴포넌트) 컴포넌트가 바뀌었을때 변경이 필요할때만 변경 기존꺼 토대로 재활용