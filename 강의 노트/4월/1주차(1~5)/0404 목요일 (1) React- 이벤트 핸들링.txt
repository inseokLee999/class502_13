이벤트 핸들링
onclick

onClick={...} -> 마우스 왼쪽
onContextMenu -> 마우스 오른쪽

onsubmit

onSubmit={..}//제출했을 때 발생 하는 이벤트
event 
	target
	currentTarget===this(이벤트가 발생한 요소)

1. 리액트의 이벤트 시스템
- 웹 브라우저의 HTML 이벤트와 인터페이스가 동일하기 때문에 사용법이 비슷

2. 이벤트를 사용할 때 주의사항
1) 이벤트 이름은 카멜표기법으로 작성
2) 이벤트에 실행할 자바스크립트 코드를 전달하는 것이 아니라, 함수 형태의 값을 전달
3) DOM 요소에만 이벤트를 설정할 수 있음
	div, input, ...

3. 이벤트 핸들링 익히기
- onChange 이벤트 핸들링하기
1) state에 input 값 담기
2) 버튼을 누를 때 comment 값을 공백으로 설정
3)  이벤트에 실행할 자바스크립트 코드를 전달하는 것이 아니라, 함수 형태의 값을 전달합니다.
4) 화살표 함수 형태로 메서드를 정의
5) input 여러 개 다루기
	- event 객체를 활용하는 것, e.target.name 값을 사용
	
ref: DOM에 이름 달기
1. ref는 어떤 상황에서 사용해야 할까?
	SPA(Single Page Application) 초기에 많은 자원을 갖고오기 때문에 느릴 수 있다. 하지만 이걸 해결하는것도 있음.
	한개 페이지만 갖고 여러 페이지를 개발하는 것 
	
1) DOM을 꼭 직접적으로 건드려야 할 때
	- 특정 input에 포커스 주기
	- 스크롤 박스 조작하기
	- Canvas 요소에 그림 그리기

2. ref 사용
	- 콜백 함수를 통한 ref 설정
	- ref를 달고자 하는 요소에 ref라는 콜백 함수를 props로 전달해 주면 됩니다.
	- 이 콜백 함수는 ref 값을 파라미터로 전달받습니다.
	- 함수 내부에서 파라미터로 받은 ref를 컴포넌트의 멤버 변수로 설정해 줍니다.
	
	1) createRef를 통한 ref 설정
		input = React.createRef();
		<input ref={this.input} />
	2) input에 ref 달기
		<input ref={(ref) => this.input=ref} ... />
	
	3) 컴포넌트에 ref 달기
		- 컴포넌트 내부에 있는 DOM을 컴포넌트 외부에서 사용할 때
		<MyComponent 
			ref={(ref) => {this.myComponent=ref}}
		/>
	4) useRef() 이라는 훅
		-current 속성을 접근 할 수 있다.
		-컴포넌트에서 사용할 지역 변수
		
컴포넌트 반복
1. 자바스크립트 배열의 map() 함수
	데이터->JSX 형태로 변환
2. 데이터 배열을 컴포넌트 배열로 변환하기
3. key
1)  key는 컴포넌트 배열을 렌더링했을 때 어떤 원소에 변동이 있었는지 알아내려고 사용
2) 유동적인 데이터를 다룰 때는 원소를 새로 생성할 수도, 제거할 수도, 수정할 수도 있습니다.
3)  key가 없을 때는 Virtual DOM을 비교하는 과정에서 리스트를 순차적으로 비교하면서 변화를 감지합니다. 
4) 하지만 key가 있다면 이 값을 사용하여 어떤 변화가 일어났는지 더욱 빠르게 알아낼 수 있습니다.

4. key 설정
1) key 값은 언제나 유일해야 합니다.
2) 데이터가 가진 고유값을 key 값으로 설정해야 합니다.

5. 응용 
1) 초기 상태 설정하기
2) 데이터 추가 기능 구현하기
3) 데이터 제거 기능 구현하기

react-icons 라이브러리 - svg 이미지 

yarn add react-icons