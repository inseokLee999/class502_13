실습환경 구축하기
1. 자바 설치하기
JDK(Java Developement Kit)
	CRTL + SHIFT + B : 즐겨찾기 탭 
	
2. 환경변수 설정하기
JAVA_HOME
window - 시스템 환경 변수 편집
파일탐색기 - C Drive - 파일탐색기 - JAVA - JDK-17 : 환경변수
사용자 변수 : 현재 사용자만 사용가능한 변수
시스템 변수 : 모든 사용자가 사용가능한 변수
C:\Program Files\Java\jdk-17
C:\Program Files\Java\jdk-17/bin - 명령코드가 들어있음 (실행 프로그램)
C:\Program Files\Java\jdk-17\lib - 라이브러리가 들어있음
C:\Program Files\Java\jdk-20
C:\Program Files\Java\jdk-20\bin 
	- 실행 파일이 있는 폴더 
	
	java.exe  : class 파일 실행 
	javac.exe : java -> class 컴파일 **
	javadoc.exe : java api 문서를 생성

- 환경 변수 등록 목적 : 어떤 경로라도 항상 접근 가능 설정 
Documentation download

.gitignore (모든파일로 만들기) /docs
3. 인텔리제이 
JAVA 확장자
인텔리제이 커뮤니티에디션 
확장자 java -> 컴파일(javac 파일명.java) -> 확장자 class -> java 클래스 파일

Write Once, Run EveryWhere
	
.java -> .class (JVM 인식하는 중간언어) -> JVM(Java Virtual Machin - 자바 가상머신) - 플랫폼에 맞는 기계어로 컴파일 
플랫폼 상관없이 동일한 class 파일을 가지고 실행 할 수 있다.

패키지 : 폴더와 동일

패키지가 설정 되지 않으면 : src


변수와 자료형
1. 컴퓨터는 데이터를 어떻게 표현할까?
	- 반도체 
	전기 신호가 있으면 1
	전기 신호가 없으면 0
	-> 2진수
	
2. 10진수와 2진수
1100100 - 2진수 

10진수 : 100

bit : 1,0으로 표현할 수 있는 최소 단위

8bit -> 1byte

		

3. 부호있는 수를 표현하는 방법
1bit : 부호 비트 (0 - 양수, 1 - 음수)

1byte = -2^7 ~ 2^7 - 1 (-128~127)

		

변수란 무엇일까?
1. 변수란? 
	- 변하는 수
	- 공간의 이름 
	-  공간 : 메모리 
	- 자료형 : 메모리 크기 
	
	메모리, 이름, 자료형
		
	자료형 : 공간의 크기 
	
2. 변수 선언하고 값 대입하기
	자료형 변수명;
	int 변수;
	
	
	자료형 변수명 = 값;
		
	
3. 변수 초기화하기
	변수에 최초로 값을 대입(저장) 하는 것 
	
	자료형 변수명 = 값;  - 선언과 동시에 초기화
	
4. 변수 이름 정하기
	1) 알파벳, 숫자, 특수문자($, _)
	
	2) 숫자는 변수명 앞에 사용 불가 
	3) 예약어는 사용 불가(return, throw, if ...)
	4) 유의미한 단어로 변수명 구성 
	
		int 1st; - X
		int _$dollor - O
		int noOfStudent - O
		int throw - X
		
		
		noOfStudent : 카멜 표기법
		
참고)
	주석 - 설명, 컴파일러가 해석 X, 제거
		// - 한줄 주석 
		/*
			여러줄 주석 
			....
		*/
		/**  설명 주석 
		*
		*
		*/
	2) 프로그램 실행 배제 - 해석 X -> 실행 X
	
변수가 저장되는 공간의 특성, 자료형
1. 변수와 메모리


참고)
자료형 
- 기본 자료형
	- 숫자를 저장하는 자료형 

- 참조 자료형
	- 다른 데이터의 주소를 참조 하는 자료형 

2. 기본 자료형의 종류


1) 정수 자료형
	byte : 1바이트(8비트) -2^7 ~ 2^7 -1 (-126~125)
	short : 2바이트(16비트)  -2^15~2^15 - 1 
	int    : 4바이트(32비트) -2^31~2^31 - 1
	long  : 8바이트(64비트) -2^63~2^63 - 1
	
2) 문자 자료형
	char : 2바이트 
	
		참고) 숫자 변수에 대입 숫자 그대로 대입 
				문자를 변수에 대입할 경우 '문자'
				
				숫자 - 문자 : 아스키코드(1byte)
									/ 양의 정수 
									unsigned : 양의 정수 
									0~255
									
									- 영문, 특수문자 
				숫자 - 한글 :  유니코드(2byte, 3byte)
				
3) 실수 자료형
	- 소수점을 가지고 있는 숫자 
	float : 4byte
			- 숫자 끝에 F(f)를 추가 
			
	double : 8byte
	
4) 논리자료형
	- 참, 거짓 (true, false)
	boolean 판별식, 조건식에서 주로 사용
	
5) 문자형
	char : 2byte~3byte '문자'
		char ch='A';
		 아스키 코드: 문자표
		 유니코드(2~3byte) : 문자표

상수와 리터럴
1. 상수 선언하기
	- 상수 : 변하지 않는 수 (constant)
	- final 예약어 변수명 앞에 추가 
	-  이름 명명 관례 
		- 대문자로 작성 
		- 단어와 단어 사이 _로 구분 
		
		 예) final int MAX_NUMBER = 10;
		
참고) final : 변경할 수 없는 
		
2. 리터럴(literal)
	
	- 리터럴 상수 
	- 재료가 되는 수 (문자, 숫자, 논리값)
	- 같은 재료 -> 하나만 생성(상수)		
	똑같은 10을 대입한다면 하나만 있으면 되기때문에 ===써도 같다
	
	-모든 정수는 처음에는 int 로 인식: int가 가장 효율적인 자료형
	long num = 10000000000
			
	1) int 10000000000 -> 오류 
	long num=10000000000L
	- 모든 실수를 처음에는 double 인식 
	(8byte)
	
형변환
- 자료형간 변환 

1. 묵시적 형변환
	- 자동 형변환 
	- 작은 자료형 -> 큰 자료형 
	- 정수(덜 정밀한 숫자) -> 실수(더 정밀한 숫자)
	- 연산 중 자동 형변환  : 연산은 같은 자료형만 가능  -> 연산을 위해서 자동 형변환 
	byte->short->int->long->float->double
	char->int
2. 명시적 형변환 / 강제 형변환
	- 데이터의 유실이 발생할 가능성이 있는 경우 - 자동 형변환 X
	- 명시적으로 형변환 의사 표현 
	int num3=100;
    byte num4=(byte)num3;// 유실없어도 해줘야함 애초에 들어오는게 int 라서 오류남
	
연산 중에도 자동 형 변환
정수 -> 실수

연산자
- 항과 연산자
1. 대입 연산자
int num1=10+20*3
-연산의 우선순위가 제일 낮다.
2. 부호 연산자
+
-:부호 반전
양수 -> 음수 
음수 -> 양수
3. 산술 연산자 +,-,*,/,%
(): 우선순위 강제적용
4. 증가감소 연산자	
5. 관계(비교) 연산자
6. 논리 연산자
- 단락회로 평가 
7. 복합 대입 연산자
8. 조건 연산자(삼항조건연산자)
9. 연산자 우선순위
	