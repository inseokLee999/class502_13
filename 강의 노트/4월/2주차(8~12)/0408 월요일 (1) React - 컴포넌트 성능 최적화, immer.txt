컴포넌트 성능 최적화

const [todos,setTodos]=useState(createBulkTodos()); -> 매번 렌더링 될 때 마다 createBulkTodos();
const [todos,setTodos]=useState(createBulkTodos); -> 최초 렌더링 시 한번만 호출 createBulkTodos

1. 느려지는 원인 분석
1) 컴포넌트는 다음과 같은 상황에서 리렌더링이 발생합니다
	- 자신이 전달받은 props가 변경될 때
	- 자신의 state가 바뀔 때
	- 부모 컴포넌트가 리렌더링될 때
	- forceUpdate 함수가 실행될 때


2. React.memo를 사용하여 컴포넌트 성능 최적화
1) 컴포넌트의 리렌더링을 방지할 때는 shouldComponentUpdate라는 라이프사이클을 사용하면 됩니다.
2) 그러나 함수 컴포넌트에서는 라이프사이클 메서드를 사용할 수 없습니다.
3) 그 대신 React.memo라는 함수를 사용합니다. 컴포넌트의 props가 바뀌지 않았다면, 리렌더링하지 않도록 설정하여 함수 컴포넌트의 리렌더링 성능을 최적화해 줄 수 있습니다.

3. 함수가 바뀌지 않게 하기
1) 함수가 계속 만들어지는 상황을 방지하는 방법은 두 가지 입니다.
- useState의 함수형 업데이트 기능을 사용하는 것
	->useCallback,useEffect 
	- 함수형 업데이트 사용
- useReducer를 사용하는 것 : 바깥에 정의 하여 한번만 만들어서 성능이 좋다

2) useState의 함수형 업데이트
- 새로운 상태를 파라미터로 넣는 대신, 상태 업데이트를 어떻게 할지 정해주는 업데이트 함수를 넣어줄 수도 있습니다. 이를 함수형 업데이트라고 합니다.
이전 상태를 변경하지 않고 새로운 상태를 생성하는 것이 함수형 업데이트의 핵심

const [number, setNumber] = useState(0);
// prevNumber는 현재 number 값을 가리킵니다.
const onIncrease = useCallback(
    () => setNumber(prevNumber => prevNumber + 1),
);

- setNumber(number+1)을 하는 것이 아니라, 어떻게 업데이트할지 정의해 주는 업데이트 함수를 넣어줍니다.
- 그러면 useCallback을 사용할 때 두 번째 파라미터로 넣는 배열에 number를 넣지 않아도 됩니다.

3) useReducer 사용하기
- useState의 함수형 업데이트를 사용하는 대신 useReducer를 사용해도 onToggle, onRemove가 계속 새로워지는 문제를 해결할 수 있습니다.
-  두 번쨰 파라미터에 undefined를 넣고 세 번째 파라미터에 초기 상태를 만들어 주는 함수인 createBulkTodos를 넣어 주었는데, 이렇게 하면 컴포넌트가 맨 처름 렌더링될 때만 createBulkTodos 함수가 호출됩니다.

4) useMemo 사용하기

4. react-virtualized를 사용한 렌더링 최적화

처음에는 보이는 부분만 갖고오고 필요한만큼 업데이트
https://github.com/yonggyo1125/reactLecture/tree/master/10.%20%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%20%EC%84%B1%EB%8A%A5%20%EC%B5%9C%EC%A0%81%ED%99%94#react-virtualized%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%B5%9C%EC%A0%81%ED%99%94

immer를 사용하여 더 쉽게 불변성 유지하기
1. immer를 설치하고 사용법 알아보기
1) 설치
	- yarn add immer 
	- npm i immer

2) immer를 사용하지 않고 불변성 유지
3) immer 사용법
	import { produce } from 'immer';
	const nextState = produce(originalState, draft => {
		// 바꾸고 싶은 값 바꾸기
		draft.somewhere.deep.inside = 5;
	})
	
	- 두 번째 파라미터로 전달되는 함수 내부에서 원하는 값을 변경하면, produce 함수가 불변성 유지를 대신해 주면서 새로운 상태를 생성해 줍니다.
	- 이 라이브러리의 핵심은 '불변성에 신경 쓰지 않는 것처럼 코드를 작성하되 불변성 관리는 제대로 해주는 것'입니다. 
	- 단순히 같은 곳에 위치하는 값을 바꾸는 것 외에 배열을 처리할 때도 매우 쉽고 편합니다.

4) useState의 함수형 업데이트와 immer 함께 쓰기
- immer에서 제공하는 produce 함수를 호출할 때, 첫 번째 파라미터가 함수 형태라면 업데이트 함수를 반환

