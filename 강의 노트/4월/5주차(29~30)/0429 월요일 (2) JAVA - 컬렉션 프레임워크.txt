컬렉션 프레임워크(Collections Framework)

컬렉션(Collections) - 데이터 군, 데이터 군집, 자료
프레임워크(Framework) : 표준화된 설계 

데이터 군을 다루는데 필요한 클래스를 표준화된 설계 

참고) 
	프레임워크 : 개발 방식의 틀을 정해 놓은 것
	예) 스프링 웹 MVC 프레임워크
1. 컬렉션 프레임워크 핵심 인터페이스 
Collection 인터페이스 3가지 List, Set, Map
	1) List : 순차 자료 구조에 대한 설계 
		- 순서가 있는 자료 구조 예) 배열
		- 중복 허용 
		- 특정 순서에 추가, 제거, 변경, 등에 유용한 메서드가 많다
		
		추가 
			- boolean add(E e)
			- boolean add(int index, E e)
			- boolean addAll(Collection<? extends E> )
			- boolean addAll(int index, Collection ...)
			
		수정 
			- E(교체한 요소) set(int index, E e)
			
		삭제 
			- E remove(int index) : 특정 순서 위치에 있는 요소 제거
			- boolean remove(Object o)
			- boolean removeAll(Collection<?> c)
			
			
		조회 
			- E get(int index)
			- int indexOf(....) : 특정 요소의 위치 번호(왼->오) 없을 때는 -1
			- int lastIndexOf(...) : 특정 요소의 위치 번호(오->왼) 없을 때는 -1
			- boolean contains(Object o)
			- boolean containsAll(Collection<E> ...)
			
		기타 	
			- int size() : 요소의 갯수 
			- retainAll(Collection ..): 매개변수에 있는 값만 유지하고 모두 제거 (교집합)
			- boolean isEmpty() : 요소가 비어 있는 상태인지
			- clear() : 전체 비우기
		구현 클래스
			1) ArrayList 
				- 배열을 구현한 클래스 
				- 조회 속도는 빠르다 
				-  공간의 크기가 변경되거나 순서가 변경되는 추가, 수정, 삭제 -> 매번 새로운 배열이 생성 
					- 성능 저하 문제 
				- 스택의 구현체를 만들기 적합한 구조 
				-쓰레드 안정성 확보 X
				- 기본 생성 배열 갯수 10, 공간의 갯수가 부족하면 -> 배열이 2배 크기로 새로 생성
				- 배열은 물리적으로 붙어 있는 나열 구조 -> 순차 조회는 매우 빠르다.
				- 순서위치 가 바뀌는 수정, 삭제-> 새로운 배열이 매번 생성 -> 성능 저하 
				- list 구현 클래스 중 가장 많이 사용
				
			2) LinkedList 
				- 다음, 이전 요소의 주소를 가지고 서로 연결 관계(물리적 순서 x, 논리적 관계 O)
				- 순서가 변경될 수 있는 추가, 수정, 삭제가 빠르다
					- 다음 요소 위치 주소만 변경하면 되므로 성능 저하X
				- 논리적 순서 이므로 위치를 계산하는 일을 더 하므로 ArrayList보다는 조회에서 불리
				- 자바는 DoublyLinkedList 형태로 구현되어 있음, 다음요소, 이전 요소의 주소를 모두 가지고 있는 형태
				- Queue 인터페이스의 구현체 
					boolean offer(E e) : 가장 끝에 추가 
					E poll() : 앞의 요소를 꺼내올때 
				
				- Deque 인터페이스(스택+큐)
					boolean offerFirst(E e): 요소 앞에 추가
					boolean offerlast(E e): 요소 끝에 추가
					
					E pollFirst() : 가장 앞의 요소를 꺼내기
					E popllLast() : 가장 뒤의 요소를 꺼내기 
			3) Vector
				- ArrayList와 동일/ 배열을 구현한 클래스
				- 쓰레드 안정성 확보
				- 과거 기능의 호환성을 유지하기 위해 남겨둠
			4) Stack 
				E pop() : 끝에 요소를 꺼내기 
				E push(E item) : 끝에 추가 
		
	2)  Set : 집합 자료 구조에 대한 설계
		- 중복을 허용하지 않는다.
			중복 제거 기준 : 동등성 비교 equals() and hashCode()
		- 순서를 고려하지 않는 자료 구조 
			
		추가 
			- boolean add(E e)
			- boolean addAll(Collection<E> ...)
			
		삭제 
			remove(Object o)
			removeAll(Collection<E> ...)
			
		조회 
			
		기타
			- int size() : 요소 갯수
			- boolean isEmpty() : 요소가 비어 있는 상태인지
			- void clear() : 전체 비우기
			- boolean contains(Object e)
			- boolean containsAll(Collection<E> ...)
			- boolean retainAll(Collection<E> ...)
		
		구현 클래스 
			1. HashSet
			2. TreeSet(정렬 기능)
				HashSet+정렬
				SortedSet 인터페이스의 구현 클래스
		
	3) Map : 사전 자료 구조에 대한 설계
	- 키 - 값의 순서쌍 구조 
	- 키 : 값을 찾기 위한 키워드 
		  : 중복 X (Set - 집합 자료)
	- 값 : 중복 Object
	
	추가
		V put(K key,V value)
			- key가 없을 땐 추가, 있을 땐 value 값 수정
		void putAll(Map...):Map객체로 전체 추가시
		V putIfAbsent(K key , V value): key 가 없을 때만 value 값 추가
	조회
		V get(Object key) : key를 가지고 값 조회, 없을 땐 null
		V getOrDefault(Object key, V defaultValue) : key를 가지고 조회 없을땐 defaultValue로 대체
		
		Set<Map.Entry<K,V>> entrySet():전체 키, 값의 쌍(Map.Entry) 조회
	
	수정
		V put(K key, V value)
		V replace(K key, V value)
		boolean replace(K key, V oldValue, V newValue):기존 값이 oldValue로 일치 하는 경우만 newValue로 변경
	
	삭제
		V remove(Object key): key를 가지고 제거
		boolean remove(Object key, Object value)-key 를 가지고 조회, 없을 땐 defaultValue로 대체
	
	기타
		int size() : 요소의 갯수
		Set <K> keySet(): map에 포함되어있는 키값만 추출
		Collection <V> values():Map에 포함되어있는 값만 추출
		boolean containsKey(Object key) : Map key 가 포함되어 있는지 여부
		boolean containsKey(Object value) : Map value 가 포함되어 있는지 여부
		
	구현된 클래스
		1. HashMap
		2. TreeMap
			-> 키 값의 정렬
				-> 기본 정렬 기준 :java.lang.Comparable / int compareTo(...)
				-> 대안 기준 : java.util.Comparator / int compare(..)
컬렉션 프레임워크의 주요 작업
C : Create 데이터 추가
R : Read  데이터 조회
U : Update 데이터 변경
D : Delete 데이터 삭제

2. Stack과 Queue

3. Iterator, ListIterator, Enumeration
Iterator 반복자 패턴 인터페이스
참고) Enumeration 동일한 반복자 패턴 인터페이스, Iterator보다 먼저 등장
	Collection
		Iterator<E> iterator()
		
		Iterator 
			Boolean hasNext(): 다음 요소가 있는지 체크
			E next(): 다음 커서로 이동 요소를 조회
ListIterator : List 에 특화 되어있는 Iterator/List 인터페이스에 정의
				- 순서에 대한 메서드가 정의
				- 순방향 조회 : hasNext(),next(),nextIndex()
				- 역방향 조회 : hasPrevioius(), previous(), previousIndex()
				
-> 어차피 반복은 처음 부터 끝까지 조회가 가장 많다
-> 향상된 for 문 사용
4. Comparator와 Comparable
java.lang.Comparable : 정렬의 기본 기준 인터페이스 (Natrual Order)
	int compareTo(T o)
	
		- 반환 값이 양수 : 현재 객체 뒤로 배치, T o 를 앞에 배치
		- 반환 값이 0 이면 : 배치 X
		- 반환 값이 음수 : 현재 객체 앞으로 배치, T o를 뒤에 배치
		
		현재 객체의 정수 - 비교 대상의 정수 : 오름차순 
		비교 대상 객체 - 현재 객체의 정수  : 내림차순 
2) Comparator : 대안적인 정렬 기준 인터페이스
	-java.util.Comparator
		int compare(T o1,T o2)
			- o1 정수 - o2 정수 : 오름 차순
			- o2 정수  - o1 정수 : 내림 차순
			
		- naturalOrder() : 기본 정렬 기준 사용한 정렬(java.lang.Comparable, int compareTo())
		- reversedOrder() : 기본 정렬 기준의 반대
		
		
5. Arrays

6. Collections