java.lang 패키지
- 기본적으로 많이 사용하는 클래스들이 포함

예) String 
	java.lang.String 

컴파일러가 패키지명 바로 아래쪽 import java.lang.*;가 추가 
- lang 패키지의 모든 클래스는 그냥 사용 가능 

Object 클래스
	- 모든 클래스의 상위 클래스 
	- 상속이 명시 X -> extends java.lang.Object 가 추가(컴파일러)
컴파일러가 자동 추가해주는 내용

- 기본생성자
- 생성자에서 super()를 첫 줄에 추가 (없으면 상속이 안됨)
- 참조 변수를 출력해주는 toString()
- 지역 변수의 상수화 (final)
- Interface의 추상메서드 - public abstract 자동 추가
- Interface의 변수 정의 ( 정적 상수 ) : public static final
- import java.lang.*;
- extends java.lang.Object;


- Object 클래스에 정의된 메서드
1. toString() 메서드
	public String toString(){
		return getClass().getName()+"@"+Integer.toHexString(hashCode());
	}
	
-getClass().getName():클래스명 (패키지명을 포함한 전체 클래스명 )-exam03.Book

참고) LocalDate

Class getClass(){
Class 클래스 객체 : 클래스의 정보가 담겨있는 객체
-클래스 파일이 로드 될 때 자동 생성되는 객체
1) 모든 클래스의 정적 변수 class
2) Object
	Class getClass() : 클래스 내부에서 사용하는 경우
}
3. Class Class.forName("패키지명을 포함한 클래스명 " ): 클래스의 동적 로딩 , 반환값이 Class
ex) Class cls= Class.forName("exam01.Book");
2.  equals() 메서드
	public boolean equals(Object obj){
		return (this==obj);
	}
	
	동일성 비교 ( 주소 ): == HashCode가 같아야함
	동등성 비교 : equals && hashCodea 메서드를 재정의, 가치 값이 같으면 같음
	
	자바스크립트 
	동일성 ===
	동등성 ==
	
	참고) string a
	문자열 비교 == 쓰면 X 
	equals 사용 o
3.  hashCode() 메서드
	-기본 구현 : 객체의 주소값
	- 객체를 찾기 위한 값
	- 기본값은 유일한 값으로 쓰기 위한 객체의 주소값 (System.identityHashCode(..))
참고) 편의기능
java.util.
	Objects
	Arrays
	Collections
	stream.Collectors
	
	...가변변수
String 클래스

1. String을 선언하는 두 가지 방법
	String str = "문자열";
	String str2 = new String("문자열");
2. String 클래스의 final char[] 변수//jdk11
최근 : final byte[]
	- 문자열은 불변하는 특징
	- 매번 문자열 추가 -> 새로운 객체가 만들어진다 -> 성능 저하
3. StringBuffer와 StringBuilder 클래스 활용하기

버퍼: 임시 메모리
	- 문자열 가감이 많은 경우에 사용
	- StringBuffer : 쓰레드 안정성 (동시성 작업시 안전)
	- StringBuilder : 쓰레드 안정성 X (동시성 작업시 영향을 받는다.)
	
	반환값이 this : 동일한 객체를 반환 -> 메서드 체이닝 기법 의도

Wrapper 클래스
- 기본 자료형을 위한 클래스
	기본자료형
		정수 : byte, short, int, long
		실수 : float, double
		논리 : boolean
		문자 : char

1. Wrapper 클래스의 종류 기본형을 감싼 형태로 정의가 되어있기 때문에
	기본 자료형의 값 -> 기능 x
	기본 자료형의 값을 처리하는 편의 기능 클래스
	byte -> Byte 클래스
	short -> Short 클래스
	int -> Int 클래스
	
	float,long->Float,Long
	
	boolean -> Boolean 클래스
	char -> Character 클래스
2. Integer 클래스 사용하기
1) Integer 클래스의 메서드

static int parseInt() : 문자열 숫자 -> int 형 숫자로 변환
static Integer valueOf(int i)
static Integer valueOf(String str)

3. 오토박싱과 언박싱
연산 (+,-,*,/ ...) : 기본 자료형만 가능한 연산, 같은 자료형 끼리만 가능

java.lang.Number

Class 클래스
-클래스의 정보가 담겨있는 객체가 자동 생성 - Class 객체

1. Class 클래스를 선언하고 클래스 정보를 가져오는 방법
	1) 모든 클래스의 정적 변수 class
	2) Object 클래스의 정의된 getClass()
2. Class 클래스를 활용해 클래스 정보 알아보기
3. Class.forName()을 사용해 동적 로딩 하기