2. java.util.Random
	Math.random() : 0~1 미만의 난수
3. java.util.Scanner
	- java.io
	- 데이터를 입력 받을 때 사용하는 편의 클래스
		: 터미널 (InputStream System.in), 파일, 네트워크 등등.. 에서 입력
		
4. java.util.StringTokenizer
	구문 문자를 가지고 문자를 분리할 때
	토큰 : 구문 문자

5. 정규 표현식 java.util.regex패키지
	-난이도 가 있다
	Pattern 클래스 : 정규 표현식 패턴 객체를 생성
		- static compile("정규식 패턴") - Pattern 객체 생성
		- static compile("정규식 패턴", 플래그)
		플래그 Pattern.CASE_INSENSITIVE : 대소문자 구분 X 
				Pattern.MULTILINE : 여러줄에 걸쳐 패턴 체크
		
		
		- Matcher matcher(CharSequence str) : 패턴을 체크
 	Matcher 클래스 : 패턴의 일치 여부 체크, 일치하는 문자열 추출
		-boolean find(): 패턴에 일치 여부 체크, 다음 패턴으로 이동하면서 계속 체크
		-String group() : 패턴에 일치하는 문자열 추출, 특정 그룹의 문자열 추출
		-boolean matches() : 패턴의 일치여부 체크 - 해당 패턴이 문자열 그 자체여야만 함
        String str = "I like football and baksetballs";

        Pattern p1 = Pattern.compile(".*ball.*"); 
		패턴 
		\w - [a-zA-Z0-9_]
		\W - [^a-zA-Z0-9_]
		\s - 공백 문자 1개
		\S - 공백 문자 아닌 문자
		\b : 문자클래스 -> backspace
			: 문자클래스 외부 -> 단어와 단어 사이 공백
		\B :  단어와 단어 사이 공백이 없는 패턴
		
		패턴 + : 패턴을 1번 이상 반복/패턴{1,}
		패턴 * : 패턴의 0번 이상 반복 / 패턴{0,}
		패턴 ? : 패턴이 있어도 되고 없어도 되는 패턴 / 패턴 {0,1}
		
		^ : 문자클래스 [^...] : 부정문자 클래스
			문자 클래스 외부 -> 시작하는 패턴 ^java -> java로 시작하는 패턴
		
		$ : 끝나는 패턴 -> java$->java 로 끝나는 패턴
		
		패턴{반복횟수} : [0-9]{4} : 숫자 4개 \d{4}
		패턴{반복횟수,} :패턴의 반복횟수 이상 
		패턴{시작횟수, 종료횟수}:\d{4,5}->4이상 5이하
		패턴{,종료횟수}: 패턴을 종료 횟수 이하로 반복
		
		단어1|단어2|단어3 : 단어1,단어2,단어 3 중 하나라도 있으면 되는 패턴
		(패턴) : 그루핑
				-(ABC){3} : ABC 패턴이 3번 반복
				- 특정 그룹의 패턴으로 특정 글부의 문자열을 추출
				- 이미지 태그에서 src="주소"
				
		전방 탐색(?=패턴) -> 패턴 앞에 있는 패턴 예) \w*(?=:) : 문자 앞에 있는 단어 여러 개 패턴
		
		전방 부정 탐색(?!=패턴) -> 예)\w*(?!=:) : 문자가 아닌 앞에 있는 패턴
		
String 클래스 메서드 중 정규 표현식을 지원 형식
				
자바스크립트 
/패턴 ->정규 표현식 객체

	플래그
	/패턴/i ->CASE_INSENSITIVE 대소문자 구분 x
	/패턴/m ->여러줄에 걸쳐 패턴 체크(MULTILINE)
	/패턴/g -> global :전역에 걸쳐 패턴 체크
test(문자열) : 패턴이 일치하는지 체크
exec(문자열) : 패턴에 일치하는 문자열을 추출
	- 커서 이동하면서 다음 패턴의 문자열을 추출
	- 더 이상 찾을 패턴이 없으면 null을 반환
<a class="..." href="..." ///>
<A CLASS="...
대소문자 구분 X, 전역에 걸쳐 체크
/패턴/ig

대소문자 구분 x 전역에 걸쳐 체크,여러줄에 걸쳐 체크
/패턴/igm

String 클래스 
	boolean endsWith() : 특정 문자열로 끝나는지 체크
	boolean startWith(): 특정 문자열로 시작하는지 체크
	boolean equalsIgnoreCase(): 비교하는데 대소문자 무시하고 비교
	
	static join
	static format
	substring
	empty: 여백 포함 x
	isblank:여백 포함(11버전 이후)
	
	indexof:왼쪽 ->오른쪽,
	lastIndexOf: 오른쪽->왼쪽,
	matched
	
	stripLeading
	stripTrailing
참고) Locale : 지역화
getBytes() 로 전송을 해야 바이트 단위로 전송을 하여 파일이 깨지지 않는다
indent() 들여쓰기
indexOf() 인덱스 찾기 
lastIndexOf() : 역순으로 인덱스