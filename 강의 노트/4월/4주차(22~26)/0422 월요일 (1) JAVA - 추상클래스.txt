3. 하위 클래스가 공유해야할 공통적인 자원 정의 가능
final 예약어 
- 변경 불가 
1. 변수 
	- 상수
	final int num = 10; 
	
2. 메서드
	- 메서드 재정의 불가 
	템플릿 메서드 패턴
	절차에 대한 메서드를 정의
3. 클래스 
	- 상속 불가
	
소스 보기 : CTRL + 마우스 왼쪽 키 	
메서드 재정의시 접근제어자의 범위 변경 
(좁은 쪽 -> 넓은 쪽)
default -> default, protected, public 
protected -> protected, public 
인터페이스
1. 인터페이스란?

설계라는 특수한 목적의 클래스
	- 추상 메서드만 정의하기 위한 클래스

참고 ) interface

API(application programming interface) : 개발시 필요한 설계 가이드 라인

JDBC API
(java database community
2. 인터페이스  문법 
interface 인터페이스명(
	추상 메서드 정의..
)
3. 클래스에서 인터페이스 구현하기
	implements : 구현하다
	
	class 클래스명 implements 인터페이스1, 인터페이스2{}
	
	
4. 인터페이스 구현과 형변환(다형성)
5. 인터페이스의 요소 살펴보기
	1) 인터페이스 상수 
	2) 디폴트 메서드
		- 자바7에서 추가
		- 완전 구현된 인스턴스 메서드 추가 가능
	3)  정적 메서드
	- 원래 가능
	- 객체 생성과 관련 없이 독자적으로 사용 가능
	- 인터페이스 명으로 접근가능
	4)  private 메서드 
	
인터페이스 활용하기
1. 한 클래스가 여러 인터페이스를 구현하는 경우
interface A
	-void method()
interface B
	-void method()
	
class C implements A,B
	-public void method(){}
	인터페이스는 추상 메서드이기 때문에 호출 주체는 명확 (구현한 클래스의 메서드)
	-다중 구현이 가능
	클래스에서는 다중 상속시 인스턴스 메서드가 동일하면 하위 클래스가 호출 주체를 정하지 X
	-다중 상속 불가
2. 두 인터페이스의 디폴트 메서드가 중복되는 경우
3. 인터페이스 상속하기
	- 개념간 체계 나눌 때 
	- 다중 상속 가능(추상 메서드...)