리덕스 라이브러리 이해하기

Context API
	-전역 상태 관리
	- 전역 상태값
	- 전역 상태값 변경 함수
	
의존성 
yarn add redux react-redux

components:프리젠테이션 컴포넌트
containers : 컨테이너 컴포넌트
modules : 데이터, 리덕스, 컨텍스트 API
액션 : 액션명
액션 객체 
{type: 액션명,...}

액션 객체 생성 함수 
변화를 일으키는 함수 - 리듀서 함수
내부적으로 dispatch 라는 함수가 있어서
dispatch -> 액션 발생 함수 
state: 함수값
- 리덕스는 가장 많이 사용하는 리액트 상태 관리 라이브러리 입니다.
- 리덕스를 사용하면 컴포넌트의 상태 업데이트 관련 로직을 다른 파일로 분리시켜서 더욱 효율적으로 관리할 수 있습니다.
- 컴포넌트끼리 똑같은 상태를 공유해야 할 때도 여러 컴포넌트를 거치지 않고 손쉽게 상태 값을 전달하거나 업데이트 할 수 있습니다.


개념 미리 정리하기
1. 액션
1) 상태에 어떤 변화가 필요하면 액션(action)이란 것이 발생합니다.
2) 하나의 객체로 표현되며, 액션 객체는 다름과 같은 형식으로 이뤄져 있습니다.

{
    type: 'TOGGLE_VALUE'
}

3) 액션 객체는 type 필드를 반드시 가지고 있어야 합니다. 이 값은 액션의 이름
4) 그 외의 값들은 나중에 상태 업데이트 할 때 참고해야 할 값이며, 작성자 마음대로 넣을 수 있습니다.


2. 액션 생성 함수(action creator)
1) 액션 객체를 만들어 주는 함수
2) 어떤 변화를 일으켜야 할 때마다 액션 객체를 만들어야 하는데 매번 액션 객체를 직접 작성하기 번거로울 수 있고, 만드는 과정에서 실수로 정보를 놓칠 수도 있습니다. 이러한 일을 방지하기 위해 이를 함수로 만들어서 관리합니다.

3. 리듀서
1) 리듀서(reducer)는 변화를 일으키는 함수입니다.
2) 액션을 만들어 발생시키면 리듀서가 현재 상태와 전달받은 액션 객체를 파라미터로 받아오고 두 값을 참고하여 새로운 상태를 만들어서 반환해 줍니다.

const initialState = {
    counter: 1
};

function reducer(state = initialState, action) {
    switch (action.type) {
        case INCREMENT:
            return {
                counter: state.counter + 1
            };
        default:
            return state;
    }
}

4. 스토어
1) 프로젝트에 리덕스를 적용하기 위해 스토어(store)를 만듭니다.
2) 한 개의 프로젝트는 단 하나의 스토어만 가질 수 있습니다.
3) 스토어 안에는 현재 애플리케이션 상태와 리듀서가 들어가 있으며, 그 외에도 몇 가지 중요한 내장 함수를 지닙니다.

5. 디스패치
1) 디스패치(dispatch)는 스토어의 내장 함수 중 하나입니다.
2) 디스패치는 액션을 발생시키는 것 이라고 이해하면 됩니다.
3) 이 함수는 dispatch(action)과 같은 형태로 액션 객체를 파라미터로 넣어서 호출합니다.
4) 이 함수가 호출되면 스토어는 리듀서 함수를 실행시켜서 새로운 상태를 만들어 줍니다.

6. 구독
1) 구독(subscribe)도 스토어의 내장 함수 중 하나입니다.
2) subscribe 함수 안에 리스너 함수를 파라미터로 넣어서 호출해 주면, 액션이 디스패치되어 상태가 업데이트될 때마다 이 리스너 함수가 호출됩니다.


const listener = () => {
    console.log('상태가 업데이트됨');
};
const unsubscribe = store.subscribe(listener);

unsubscribe(); // 추후 구독을 비활성화할 때 함수를 호출

7. 리액트 없이 쓰는 리덕스
1) 리덕스는 리액트에 종속되는 라이브러리가 아닙니다.
2) 리액트에서 사용하려고 만들어졌지만 다른 UI 라이브러리/프레임워크와 함께 사용할 수도 있습니다.


리덕스의 세 가지 규칙
1. 단일 스토어
	1) 하나의 애플리케이션 안에는 하나의 스토어가 들어가 있습니다.
	2) 여러개의 스토어를 사용하는 것이 완전히 불가능하지는 않습니다. 특정 업데이트가 너무 빈번하게 일어나거나 애플리케이션의 특정 부분을
	3) 완전히 분리시킬 때 여러 개의 스토어를 만들수도 있지만, 상태 관리가 복잡해질 수 있으므로 권장하지 않습니다.
	
2. 읽기 전용 상태
	1) 리덕스 상태는 읽기 전용입니다. 리덕스도 상태를 업데이트할 때 기존의 객체는 건드리지 않고 새로운 객체를 생성해 주어야 합니다.
	2) 리덕스에서 불변성을 유지해야 하는 이유는 내부적으로 데이터가 변경되는 것을 감지하기 위해 얕은 비교(shallow equality) 검사를 하기 때문입니다.
	3) 객체 변화를 감지할 때 객체의 깊숙한 안쪽까지 비교하는 것이 아니라 겉핥기 식으로 비교하여 좋은 성능을 유지할 수 있는 것 입니다.
	
3. 리듀서는 순수한 함수
	1) 변화를 일으키는 리듀서 함수는 순수한 함수여야 합니다.
	2) 순수한 함수는 다음 조건을 만족합니다.
		- 리듀서 함수는 이전 상태와 액션 객체를 파라미터로 받습니다.
		- 파라미터 외의 값에는 의존하면 안 됩니다.
		- 이전 상태는 절대로 건드리지 않고, 변화를 준 새로운 상태 객체를 만들어서 반환합니다.
		- 똑같은 파라미터로 호출된 리듀서 함수는 언제나 똑같은 결과 값을 반환해야 합니다.