함수
-일련의 처리를 하나로 모아 언제든 호출 할 수 있도록 만들어 놓은 것
-기능

1. 함수 선언문으로 함수 정의하기

function 함수명(사실 변수명임 ㅋ) ( 매개 변수){
	실행코드	
	return 반환 값;
}
function add(x,y) {
    return x+y;
}
add : 변수 - 함수 객체의 주소값
자바스크립트는 함수가 존재하지 않는다 함수는 객체임

참고) console.(dir) : 객체의 속성과 값 형태 출력

객체간의 상속 

상속
	[[prototype]](상속관계링크) : 프로토타입 체인 - 상속관계 링크
					__proto__ 속성을 통해서 접근
	
4. 함수 선언문의 끌어올림
	함수 객체(실행x)-> 번역(평가)-> 실행가능객체로(EC, execution context) -> 실행
	
	global EC{
		변수 레코드 - window 의 하위 속성으로 변수가 정의
			window.num(5);
		외부 변수 레코드 참조 : null
	this 바인딩 : window 객체의 주소 값
	}
	
	outer EC{
		변수 레코드 객체:{
			num1 :10
		}
		외부 변수 레코드 참조: global EC 변수 레코드 주소 : window
		
		this 바인딩 : 호출한 객체의 주소 값
	}
	inner EC{
		변수 레코드 객체{
		num2:20,
		result:35
		}
		외부 변수 레코드 참조: outer EC 변수 레코드 주소  outer EC로 감
	}
	this 바인딩 : 호출한 객체의 주소 값
	#유효범위 체인(Scope)
	this 바인딩 - this 지역 변수 값 결정 
	
5. 값으로서의 함수
	함수(x) 함수 객체 - 값이 있음, 변수에 대입가능
	
	일등 함수 : 변수와 함수를 동등하게 취급 함수 == 값
	1) 매개변수로 함수 객체를 사용
	2) 반환값으로 함수 객체를 사용(클로저)
		반환 값이 함수인것 : 팩토리 함수
	-> 함수형 프로그래밍이 가능

6. 참조에 의한 호출과 값에 의한 호출과

변수의 유효범위
1. 전역 유효범위 와 지역 유효 범위
	-> 함수 지역
	-> 유효범위 체인(scope)
	
2. 변수의 충돌
3. 함수 안에서 
5. 블록 유효 범위 : let 과 const

	var : 함수 지역이 유효범위
	
	let,const->{...}
	
	let : 변수 - 값 변경이 가능
	const : 상수 - 값 변경이 불가
	
	-> 변수는 기본적으로 const로 정의, 변경이 필요한 경우만 let으로 사용
6. 함수 리터럴로 함수 정의 하기
	const 변수명 = 함수 객체;
7. 객체의 메서드
8. 즉시실행함수
	