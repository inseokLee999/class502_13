AOP 프로그래밍
(Aspect Oriented Programming)
spring-aop API spring context 추가시 자동 추가
aspectjweaver - 구현체

1. 프록시(proxy)
	- 데코레이터 패턴
	
	팩토리얼 연산
	
	동적 프록시 
	java.lang.reflect.Proxy
	
	InvocableHandler
	
	- 인터페이스를 통한 프록시 / 인터페이스 정의가 필수
2. AOP
	- Aspect Oriented Programming : 관점 지향 프로그래밍
		관점 : 개발자의 공통적인 관심 사항
		
		공통 기능 : 핵심 기능 분리 기술
		
		공통 기능 - 스프링이 대신 수행
		핵심 기능 - 개발자가 정의 
		
	스프링에 제공하는 모든 관리 기능은 전제조건이 있다
	-> 스프링이 관리하는 객체만 관리기능을 제공한다.
	- 스프링 컨테이너에 있는 객체만 적용 가능!
1) @Aspect 
	- 공통 기능이 정의된 클래스
2) @Pointcut 
	- execution 명시자
	
	- 공통 기능이 적용 될 패키지 범위, 메서드 패턴
3) 공통기능을 수행할 메서드 위에 정의
@Before 
	- 메서드가 호출 되기 전 공통 기능
@After
	- 메서드가 호출 된 후 공통 기능
@AfterReturing
	- 반환 값을 내보낸 후 공통 기능
@AfterThrowing
	- 예외가 발생 한 후 공통 기능
@Around
	- 메서드 호출 전, 호출 후 공통 기능
	
	- ProceedingJoinPoint
		Object proceed():핵심 기능 대신 실행
		- Signature getSignature() : 
		- getTarget() : 실제 메서드를 호출한 객체(RecCalculator...), 
		- Object[] getArgs()
		
	- Signature
		String getName()
		String toLongString()
		String toShortString()
		
		.* -> exam01.* -> exam01 패키지의 하위 클래스/ exam01.RecCalculator
		..* -> exam01..* -> exam01 패키지를 포함한 하위패키지 포함한 모든 클래스
							예) exam01.sub.RecCalculator, exam01.sub1.sub2.RecCalculator
							
		* aopex.*.*()
		모든 반환값
		aopex.* -> aopex 패키지 모든 하위 클래스
		aopex.*.* -> aopex 패키지 모든 하위 클래스의 모든 메서드
		aopex.*.*() -> aopex 패키지 모든 하위 클래스의 매개변수가 없는 모든 메서드
		
		* aopex..*.*(..) -> 모든 반환값에 aopex 패키지를 포함한 하위패키지를 포함한 모든클래스 모든 메서드
		
		* get*(*) -> get 으로 시작하는 매개변수가 1개짜리 메서드
		* get*(*,*) -> get 으로 시작하는 매개변수가 2개짜리 메서드
		
		* read*(Integer,..) -> 메서드명이 read 로 시작하고 첫번째 매개변수는 Integer로 고정, 두번째 부터는 0개이상 매개변수
3. @Order
	ProxyCache -> ProxyCalculator
	-> 프록시의 적용 순서, 숫자가 작은 순서 부터 적용
4. 프록시 생성방식
<<<<<<< HEAD

=======
자바의 프록시는 인터페이스로 만들어지기 때문에 직접 대입하지말고 인터페이스를 대입해야한다
>>>>>>> fdf49d0c9dfb4f07f73259e007ba49f3ddd72be1
5. @Around의 Pointcut 설정과 @Pointcut 재사용