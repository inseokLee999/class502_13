스프링 DI 설정 및 사용
1. 스프링을 이용한 객체 조립과 사용
2. DI 방식1 : 생성자 방식
3. DI 방식2 : 세터 메서드 방식
4. @Configuration
5. @Bean 	
6. 두 개 이상의 설정 파일 사용하기
1) 생성자 매개변수
	: AnnotationConfigApplicationContext(Class<>...)
	: AnnotationConfigApplicationContext(String ... basePackages) : 패키지 명으로도 가능
	
2) @Import 
	설정 클래스에서 다른 설정 클래스를 포함 시킬 때 


의존성 자동 주입
1. @Autowired
	- 의존성을 주입해야되는 객체임을 알려주는 애노테이션
	
	1) 멤버 변수 위에 정의
	2) setter 메서드 위에 정의
	3) Optional 정의된 멤버 변수, 메서드의 매개 변수 위에 있어도 주입
	
	4) 자동 스캔 적용(@ComponentScan)시
	- @Autowired 미 적용 방식
	- 생성자의 매개변수로 정의 / 기본 생성자가 정의되지 않아야 한다.
	- 롬복 @RequiredArgsConstructor 와 함께 많이 사용
		- 초기화가 반드시 필요한 멤버 변수를 생성자 매개 변수에 추가
	5) 
	참고)5에 있었던 예전꺼
	@Resource
	@Inject
2. 일치하는 빈이 없는 경우
3. @Qualifier : 한정자
	: 빈의 이름을 직접 지정
	Ex) @Qualifier("memberDao2")
    private MemberDao memberDao;
4. 빈 이름과 기본 한정자 
	@Bean : 메서드명 
	@Qualifier : 변경한 이름
	클래스명 (자동 스캔의 경우)-> 앞 첫문자는 소문자
	예) class JoinService ->joinService
5. @Autowired 애노테이션의 필수 여부
	- required : true - 기본값, 주입받는 객체는 반드시 스프링 컨테이너에 생성되어있어야한다.
						-없을 수 있는 주입 받는 객체 @NonNull 애노테이션을 적용해도 필수 여부해제
						- 메서드 호출 O, 없는 의존성에 null 을 대입
						
		-없으면 예외 발생
				: false - 주입받는 객체 x , setter 메서드 호출 x , 의존성 주입x
				
		
컴포넌트 스캔 : 지정한 패키지 범위를 기본 스캔 대상 스캔 -> 객체 생성
1. @Component

2. @ComponentScan
	- 스프링 컨테이너가 자동으로 스캔 할 패키지 범위 설정
3. 기본 스캔 대상
	
	@Component
	@Service
	
	- 특정 기능과 관련된 애노테이션
	@Configuration
	@Controller
	@RestController
	@ControllerAdvice
	@RestControllerAdvice
	@Aspect
	@Repository : DAO에 주로 정의
4. 컴포넌트 스캔에 따른 충돌 처리
1) 빈 이름 충돌
	- 클래스명만 빈의 이름으로 고려
	- 다른 패키지에 있는 동일한 이름의 클래스가 있으면 충돌
2)  수동 등록한 빈과 충돌
3) excludeFilters

Ant 패턴 - aspectJ weaver 의존성 추가..

빈 라이프 사이클과 범위
1. 컨테이너 초기화 : 빈 객체의 생성, 의존 주입, 초기화

2. 컨테이너 종료 : 빈 객체의 소멸

3. 빈 객체의 라이프 사이클
1) 객체 생성 -> 의존 설정 -> 초기화 -> 소멸
- 초기화 : 객체가 완전히 생성되고 조립된 다음에 처리할 작업을 정의하면 실행 되는 단계
- 소멸 : (ctx.close()-> 객체 소멸 단계) : 소멸전에 처리할 작업을 정의하면 실행되는 단계

스프링 컨테이너 생성시 진행 되는 부분( 객체 생성 -> 의존 설정 -> 초기화)
2) InitializingBean (인터페이스)
	- afterPropertiesSet 메서드 : 초기화 단계시에 실행된다.
	(객체가 완전히 조립되고 생성된 후에 처리할 작업을 정의)
	
3) DisposableBean
	- destroy() 메서드
		- 컨테이너에 있는 객체가 소멸되기전에 실행 
		(주로 객체 소멸전에 할 작업 ex) 자원해제..
		

4.  빈 객체의 초기화와 소멸 : 커스텀 메서드
@Bean
1) initMethod 
	- initializingBean :: afterPropertiesSet 메서드와 동일 시점에 호출
	
2) destroyMethod 
	- disposableBean :: destroy 메서드와 동일 시점에 호출

5. 빈 객체의 생성과 관리 범위
@Scope 

- @Scope("singleton"): 정의하지 않아도 기본은 싱글톤 패턴으로 관리
- @Scope("prototype"): 매번 조회시마다 새로운 객체를 생성
					- 스프링 객체 관리 기능은 기본적으로 싱글턴 일때 정상적으로 동작
					- prototype : 일부 기능에 제한조건, 실행시점도 달라질 수 있다.