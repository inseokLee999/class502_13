JUnit 5 기초1

테스트 
- 단위 테스트 
	: 기능 단위별 테스트 - junit5
	
- 통합 테스트
	: 모든 기능을 통합, 유기적으로 잘 동작하는지 테스트
1. 의존성 

1) maven 기준 
junit-jupiter - dependency
 maven-surefire-plugin - plugin

2) gradle 기준

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:버전'
}

test {
    useJUnitPlatform()
}


2. @Test 애노테이션
1) 테스트로 사용할 클래스를 만들고 @Test 애노테이션을 메서드를 붙이면 테스트 가능 
2) @Test 애노테이션을 붙인 메서드는 private이면 안 된다.

참고)
	테스트용 클래스 -> 명칭 뒤에 Test 붙이는 것이  관례


3. 테스트 메서드 : 주요 단언 메서드
1) assertEquals(expected, actual) : 예상했던 값(expected)이 실제 결과와 일치하는지(equals and hashcode)
2) assertNotEquals(unexpected, actual) : 예상했던 값과 다르면 통과
3) assertSame (Object expected, Object actual) : 예상했던 객체(expected)와 실제 객체(actual) 일치하는지 체크(==,동일성)
4) assertNotSame(Object unexpected, Object actual) :다르면 통과
5) assertTrue(boolean condition) : True 면 통과
6) assertFalse(boolean condition) : False 면 통과
7) assertNull(Object actual) : null이면 통과
8) assertNotNull(Object actual) : not null이면 통과
9) fail() : 특정 상황에서 테스트 실패를 유도하는 경우
10) assertThrows(Class<T> expectedType, Executable executable) : 주로 검증할때 사용(예외 발생여부)
: expectedType - 발생 예상되는 예외 클래스 클래스
: executable - 실행 코드
11) assertDoesNotThrow(Executable executable) 예외 발생하지 않아야 통과
12) assertAll(Executable... executable) : 다 실행한다 (성공,실패 여부 상관없이)

참고) TDD(Test Driven Development) : 테스트 주도 개발
테스트를 통한 설계 방식

1) 테스트를 하기 위한 시나리오 -> 필요한 기능을 개발 -> 테스트 실행-> 통과 x -> 기능 보완(리팩토링) -> 통과 -> 기능 완성
테스트 하기 위한 시나리오
간단한 시나리오 -> 복잡한 시나리오
4. 테스트 라이프사이클
1) @BeforeEach 애노테이션
	: 각각의 단위 테스트 메서드 실행 전에
2) @AfterEach 애노테이션
	: 각각의 단위 테스트 메서드 실행 후에
3) @BeforeAll 애노테이션
	: 모든 테스트 실행 전 (한번만 실행)
	: 정적 메서드로 정의
4) @AfterAll 애노테이션
	: 모든 테스트 실행 후 (한번만 실행)
	: 정적 메서드로 정의 

5. 추가 애노테이션
1) @DisplayName : 테스트에 대한 설명
2) @Disabled : 테스트 배제

6. 모든 테스트 실행하기
1) mvn test
mvn package 컴파일 -> 테스트 -> 배포(jar)
2) gradle test
gradle build 컴파일 -> 테스트 -> 배포(jar)