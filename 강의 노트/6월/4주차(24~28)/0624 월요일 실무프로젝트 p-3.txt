실무프로젝트(P-3)
spring container 객체 관리
1. 요청이 들어온다
2. 모든 요청은 DispatcherServlet(모든 요청과 응답의 창구)로 간다.
3. 객체를 관리하는 컨테이너 재귀적으로 찾아서 생성해주고 주입해준다.(Container,..) 주소에 따른 컨트롤러 찾아야한다 -> handler mapping -> 찾은 메서드를 handlerAdapter가 실행 (요청 데이터를 주입해준다..)
BeanContainer::loadBeans() : 모든 관리 객체 로드(객체 생성 및 의존성 주입)
	- 특정 애노테이션이 있는 객체를 자동 생성, 의존하는 객체 주입
	- @Controller : 컨트롤러 역할 객체, 
	 @RestController : 같은 컨트롤러 역할 객체이지만 응답시 JSON 형태로 응답
	 @Service : 기능..
	 @Component : 기능..
	 @ControllerAdvice : @Controller의 공통 처리
	 @RestControllerAdvice : @RestController 의 공통 처리
	 
	 getClass().getResource():현재클래스(BeanContainer) 파일의 물리적 경로
	 build/.../BeanContainer.class
4. HandlerMapping - HandlerMappingImpl : 요청에 맞는 컨트롤러 객체 및 메서드 조회 
	@Controller,@RestController 에 정의된 하기 애노테이션
	- @RequestMapping : 모든 요청 메서드에 매칭
	- @GetMapping : Get요청 메서드에 매칭
	- @PostMapping : Post요청 메서드에 매칭
	- @PatchMapping : Patch 요청 메서드에 매칭
	- @PutMapping : Put..
	- @DeleteMapping : Delete..
5. HandlerAdapter - HandlerAdapterImpl 
	1) 찾은 컨트롤러의 메서드 실행하여 유입된 요청을 처리
	2) 각 컨트롤러의 반환값 
		- @Controller인 경우 : 템플릿(/WEB-INF/templates/ + 반환값 + ".jsp")로 경로 찾아 출력 버퍼 교체
		- @RestController인 경우 : 반환값은 자바 객체가 되며 JSON 형태({"이름": "값", "이름" : "값" .. })으로 출력
		
		- 요청 데이터 메서드 매개 변수 주입
		@PathVariable : 경로 변수
		@RequestParam("이름") : 요청 데이터 - GET 쿼리 스트링 이름, POST - 양식 입력 항목 name 값
		
		void setEmail(String email)
		
		setter 찾고 ->Email -> email -> request.getParameter("email")
	3) 컨트롤러를 찾지 못한 경우
		- StaticResourceMapping - StaticResourceMappingImpl - 웹 정적 경로인 /webapp/static/에서 파일이 있는지 체크 하고 출력 
		- 웹 정적 경로에서도 못찾는다면 설정한 파일 업로드 경로에서 찾음 
		# 파일 업로드 경로
		file.upload.path=D:/uploads
		