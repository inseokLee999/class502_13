JSTL
1. 설치하기
jstl-api
jstl-impl - 구현체
core 라이브러리 : 제어구문, 반복문 등
fmt 라이브러리 : 형식화, 숫자 형식, 날짜 형식, 시간대, 다국어
functions 라이브러리 : 문자열 가공 등
sql 라이브러리

https://jakarta.ee/specifications/tags/3.0/tagdocs/

URI

2. 코어(core) 라이브러리
	uri="jakarta.tags.core"
	 참고)
		javaee 9 ->  JSTL 1.2 
		uri="http://java.sun.com/jsp/jstl/core"
<%@ taglib prefix="c" uri="jakarta.tags.core"%>
1) <c:set>	
	<c:set var="속성명" value="값"/>
	${속성명}
	scope = "page|request|session|application"
	
	-page : 기본값
2) <c:remove> : 속성 값 제거 
<c:remove var="속성명"/>

- scope :값이 없으면 모든 범위의 속성을 제거
	scope = "page|request|session|application"
3) <c:if> : 조건식
<c:if test="${조건식}">
	// 조건식이 참일 때 실행
</c:if> 
<c:if test="${num%2==1}">
    홀수입니다.
</c:if>
<c:if test="${num%2!=1}">
    짝수입니다.
</c:if>
4) <c:choose>: 다중 조건문 /다중 선택문

<c:choose>
	<c:when test="${조건식1}">
		//조건식 1이 참일 때 출력
	</c:when>
	<c:when test="${조건식2}">
		//조건식 1이 거짓, 조건식 2가 참일 때 출력
	</c:when>
	..
	<c:otherwise>
		//모든 조건이 거짓 일 때 출력
	</c:otherwise>
</c:choose>
5) <c:forEach>
	- 반복문 
	- 횟수 (begin 시작숫자, end = 종료 숫자, step = 증감단위/ 기본값1,var="카운트변수")
	- 배열, 컬랙션(Collection - List, Set), Iterator, Enumeration(items="배열,컬렉션 속성" var="요소 1개")
	//향산된 for 문
	varStatus = "status"
		${status.index} : 반복 순서번호 (0부터 시작)
		${status.count} : 반복 순서번호 (1부터 시작)
		${status.first} : 첫번째 행인지
		${status.last} : 마지막 행인지
		${status.current} : 현재 반복 요소
	- 콤마(,) 문자열 
	- <c:forEach>액션의 items 애트리뷰트를 이용해서 처리할 수 있는 데이터
	
6) <c:forTokens>
	- java.util.StringTokenizer 
	
	var="문자" items="문자열..." delim="구분 패턴 문자"
	
7) <c:catch>
	- 자바 코드 없이 태그 방식으로 예외 처리 (try catch 역할)
	- var : 예외가 발생하면 생성될 예외객체 변수명
			- 예외가 없으면 null
<c:catch var="e"><%--try catch 와 비슷함--%>
    <%
        String str = null;
        str.toUpperCase();
    %>
</c:catch>
<c:if test="${e!=null}">
    에러메시지 : ${e.getMessage()}<br>
    에러메시지 : ${e.message}
</c:if>
			
8) <c:redirect>
	- 주소 이동
	- url : 이동할 주소
	- <c:param name="이름" value = "값"/> : 쿼리 스트링 형태로 url 에 추가
	<c:redirect url="ex03.jsp">
		<c:param name="name1" value="value1"/>
	</c:redirect>
	=> url : http://localhost:3000/day05/exam06/ex03.jsp?name1=value1
	참고 ) 
		HttpServletRequest
			-sendRedirect(String location) 과 동일
9) <c:import>
		: 서버쪽 자원 외에도 외부 자원도 버퍼에 추가 가능
		- url : 버퍼에 추가할 자원 주소
		-<c:param name="이름" value="값" /> 요청 데이터에 추가
	참고)
		<jsp:include ... />
			: 서버쪽 자원만 버퍼에 추가 가능
			: <jsp:param name="이름" value="값"/> 요청 데이터 추가
		어떤 값을 출력하는 태그의 경우 값을 EL 식 속성으로 추가할 수 있는 속성 var
		var="변수" : 변수에 출력 결과물이 담긴다.
		<c:import var="html" url="inc.jsp"/>
		${html}	
10) <c:url> 
 - contextPath 를 URL 에 자동 붙여주는 태그
 - var : 주소 값을 담을 EL 식 속성명
 -<c:param name="이름" value="값"/> : 주소에 쿼리스트링이 추가
 
참고)
	HttpServletRequest
		String getContextPath()
11) <c:out> 	
	-Escape 된 문자열로 출력
	-Escape 된 상태 : HTML 태그를 문자열로 변경해서 출력
		<h1>제목</h1> -> lt;h1gt;제목lt;h1gt;
	-default : 기본값 (값이 없으면 실행)
	-escapeXml : true - 기본값(HTML -> 문자)
				: false : ->HTML로 인식
	<c:set var="html" value="<script>alert('알림!');</script>"/>
	<%--${html}--%>
	<c:out value="${html}" />
3. 포매팅(fmt) 라이브러리
	uri="jakarta.tags.fmt" // JSTL 3.0
	prefix="fmt"
	
	
	JSTL 1.2
	uri="http://java.sun.com/jsp/jstl/fmt"
	
1) fmt:formatDate : 날짜 형식화 
	- java.text.SimpleDateFormat 
	- Date 객체를 기준
	- type : date(기본값) - 날짜만 표기
			time - 시간만 표기
			both - 날짜와 시간을 함께 표기
	- dateStyle : full, long, medium, short
	- timeStyle : full, long, medium, short
	- pattern : SimpleDateFormat 에 정의된 날짜, 시간 형식화 패턴
2) fmt:formatNumber : 숫자 형식화 
	- java.text.DecimalFormat ...
	- groupingUsed : true(기본값)
					false(,로 숫자 3자리 마다 나누지 않는다.)
	- type : percent (소수점 표기 -> 퍼센트 표기)| currency (지역화에 맞는 통화 표기법)
	- currencySymbol = "기호"
	- pattern
		참고) 
		DecimalFormat
			패턴 기능 유형
				0패턴, #패턴
3) fmt:setLocale : 
	: 지역화 설정
	- value : 언어코드 (en, ko, ja, zn)
			: 언어코드_국가코드(en_us,ko_kr,ja_jp...)

4) fmt:timeZone과 fmt:setTimeZone
	- 시간대
	- value : Asia/Seoul
	
	-fmt:setTimeZone : 태그가 적용된 후 , 하위 태그에 반영
	-fmt:timeZone : 여는 태그, 닫는 태그, 태그 안쪽에 내용이 반영
5) fmt:setBundle과 fmt:bundle
	<fmt:message/> 함께 사용
	- 메세지 관리, 문구 관리
	
	-properties 파일형태로 관리
	키=값
	
	-properties 파일의 주석
	#설명 ...
	
	<fmt:bundle basename="(경로)messages.commons">
	...
	</fmt:bundle>
	
	<fmt:setBundle.../> : 태그 적용 시점 이후 모두 반영(setTimeZone과 비슷)
	클래스 패스 : 클래스 파일을 인식 할 수 있는 경로
	src/main/java
	src/main/resouces : 메세지 파일(properties 파일)
	
	webapp/WEB-INF/lib, webapp/WEB-INF/classes...
	- 메세지 치환 기능
	- 메세지 작성시 {0}...{1}...{2}
	{순서}
	<fmt:param value="값"/> 
	
	-다국어 설정 
	파일명_언어코드.properties
	
	ctrl shift n 시크릿 모드
	한국어 English
	언어 감지 순위
	1. 요청헤더 Accept-Language 헤더 정보 : Locale 객체
	2. <fmt:setLocale /> 설정
6) fmt:requestEncoding
	<fmt:requestEncoding value="UTF-8"/>
	
	참고)
		서블릿 4버전까지 적용
		request.setCharacterEncoding("...");
4. 함수(functions) 라이브러리
	uri="jakarta.tags.functions"
	prefix="fn"
	- 문자열 가공 편의 함수
	- EL식 내에서 적용 가능${fn:concat(..)}