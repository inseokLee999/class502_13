회원가입, 로그인 구현하기

의존성
servlet-api
servlet.jsp-api

jstl-api
jstl-impl
lombok

mybatis
ojdbc11
slf4j-api
logback classic

mockito
mockito jupiter
javafaker
dependencies {
    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    testCompileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    compileOnly 'jakarta.servlet.jsp:jakarta.servlet.jsp-api:3.1.1'
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.0'
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl:3.0.1'

    compileOnly 'org.projectlombok:lombok:1.18.32'
    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

    implementation 'com.oracle.database.jdbc:ojdbc11:23.4.0.24.05'
    implementation 'org.mybatis:mybatis:3.5.16'
    implementation 'org.slf4j:slf4j-api:2.0.13'
    implementation 'ch.qos.logback:logback-classic:1.5.6'
	implementation 'org.mindrot:jbcrypt:0.4'

    testImplementation 'org.mockito:mockito-core:5.12.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.12.0'
    implementation 'com.github.javafaker:javafaker:1.0.2'

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}
CREATE TABLE MEMBER(
	USER_NO NUMBER(10) PRIMARY KEY,
	EMAIL VARCHAR2(60) NOT NULL UNIQUE,
	PASSWORD VARCHAR2(65) NOT NULL,
	USER_NAME VARCHAR2(30) NOT NULL,
	USER_TYPE VARCHAR2(30) DEFAULT 'USER' CHECK(USER_TYPE IN ('USER','ADMIN')),
	REG_DT DATE DEFAULT SYSDATE,
	MOD_DT DATE
);
CREATE SEQUENCE SEQ_MEMBER;

컨트롤러 - 뷰
회원가입 -member/join
		GET : 회원가입 양식
		POST : 회원가입 처리
로그인 - member/login
		GET : 로그인 양식
		POST : 로그인 처리

모델 - 서비스
회원가입 기능 - JoinService
			- RequestJoin : DTO(데이터 전달 객체)
			- joinValidator
			- MemberMapper :DAO
	비밀 번호 처리는?
	
	참고)
		암호화
			-양방향 암호화 : 암호화 - 복호화
			AES256, ARIA..
			-단방향 암호화 : 해시 - 복호화 불가
				: 고정 해시 - 같은 값에 대하여 같은 해시 값 - md5,sha1,sha256,sha512
				sha256: abcd-88d4266fd4e6338d13b845fcf289579d209c897823b9217da3e161936f031589
				: 유동해시 - 같은값에 대해서도 만들 때마다 변경되는 해시 / 예측 불가능성
				BCrypt
				abcd:$2y$10$DAyOF5ll9lCxIjyKpSrvEud1NEpRE.FKrjIxLZ6p9h1C7TW6CqGte
	
	jbcrypt 
		:haswpw(): 해시 생성
		:checkpw() : 해시 검증
로그인 기능

S - Single Responsibility Principle - 단일 책임 원칙
O - Open Closed Princlple 개방 폐쇄 원칙/ 확장에는 열려있고 변화에는 닫혀있는 구조 - 전략 패턴
L - Listov Substitution Principle 리스코프 치환 원칙 - 다형성, 하위 클래스, 인터페이스 등 자료형 ->< 상위 클래스, 인터페이스의 자료형으로 변경 가능, 그 역의 관계도 가능
I - Interface Segregation Principle 인터페이스 분리 원칙
D - Dependency Inversion Principle 의존 역전 원칙

1. 필수 항목 체크(이메일, 비밀번호)
2. 이메일로 회원이 등록되어 있는지 체크
3. 비밀번호 검증
4. 세션에 회원 정보 유지

기본자료형 래퍼클래스
	Integer
		parseInteger(문자열)
		
	Long
		parseLong(문자열)
	Boolean
		parseBoolean(문자열)
	
	parse자료형()-> 문자열 -> 기본 자료형
	
	valueOf(문자열, 기본자료형 값) -> 래퍼 클래스 객체로 변환
	
	Integer.parseInt() -> int 변환
	Integer.valueOf()->integer 객체로 변환
	
	응답 코드 : 서버가 응답 할때 전송/ 처리 상태에 대한 코드
	
	