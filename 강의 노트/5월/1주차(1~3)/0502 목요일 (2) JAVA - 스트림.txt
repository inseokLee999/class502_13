java.util.Array: 배열의 편의 기능

java.util.Collections : 컬렉션의 편의 기능

스트림(Stream)
1. 스트림이란?
	java.util.stream
	
	- 데이터 소스가 무엇이든 간에 같은 방식으로 다룰 수 있게 데이터를 추상화 하고 데이터를 다루는데 자주 사용되는 메서드들을 정의해 놓음
		- 배열이든, 컬렉션이든
		- Stream 객체로 변환하면 동일한 방식으로 처리 가능
		- + 편의 기능 
		
	- 스트림은 데이터 소스를 변경하지 않는다.
	- 스트림은 일회용이다.
	- 스트림은 작업을 내부 반복으로 처리한다.
	
2. 스트림만들기
1) 컬렉션
	Collection
			Stream stream()
			
2) 배열 
	Arrays
		static stream(....)

	
3) 스트림
	Stream
			.of(T... )
			
	
	참고)
		JDK8 부터 
			of(...) : 객체 생성 메서드

2. 스트림의 연산
1) 중간연산
	- 스트림 중간 부분에 정의된 메서드
	- 반환값이 Stream인 형태 
	- 최종연산이 호출 될 때 까지는 연산 X

2) 최종연산
	- 가장 끝에 추가된 메서드
	- 반환값이 Stream이 아닌 형태 

3) 지연된연산
	중간 연산은 최종 연산이 호출되어야 스트림을 소비하면서 연산이 진행 된다.

3. 기본자료형을 다루는 스트림
	
	IntStream 
	LongStream 
	DoubleStream 
		->  오토박싱, 언박싱이 발생 X -> 성능상 이점
		-> 숫자 관련 편의 기능 추가(예 - 통계 관련 기능)
	
	
	일반 스트림 -> 기본 자료형 스트림으로 변환 메서드 
	mapToInt   : IntStream 
		Stream<Integer> -> IntStream 
		
	mapToLong : LongStream
	mapToDouble : DoubleStream
	
	기본 자료형 스트림 -> 일반 스트림 변환 메서드 
	boxed()
	
	IntStream -> Stream<Integer>
	LongStream -> Stream<Long>
	
	IntStream 에는 정렬 기능 sorted()메서드가 1개만 정의 <- 기본 기준 정렬
		-> 기본정렬 기준외에 다른기준 정렬은? X
		
	그런데 일반 스트림 Stream 에서는 sorted()와 sorted(Comparator)가 정의 되어 있다.
	
	그러면 IntStream을 일반 스트림인 Stream<Integer>로 변환하면 sorted(Comparator ...)통해서 정렬을 바꿀수 있지 않을까?
	int[] nums3 = Arrays.stream(nums).boxed()
                .sorted(Comparator.reverseOrder())
                .mapToInt(x->x)
                .toArray();
	참고)
		IntStream 
			static IntStream range(시작번호, 종료 번호(미만))
								 rangeClosed(시작번호, 종료 번호(이하))
								 
								
			IntSummaryStatistics summaryStatistics()
				
		
스트림 활용 
1. 생성하기
	Collection::stream() : 일반 스트림
	Arrays.stream(...) : 일반스트림 + 기본 자료형 스트림 
	
	Stream.of(T.... ) : 일반스트림, 기본 자료형 스트림
	
1) 특정 범위의 정수
	기본 자료형 스트림(IntStream,LongStream)
		-횟수가 정해진 반복을 할 때
	range(int s, int e) : [s,e)
	rangeClosed(int s, int e) : [s,e]
	
2) 임의의 수
	java.util.Random
		무한 스트림 - 갯수 제한이 필요
		limit()
		IntStream ints();  : 정수범위 난수 
		LongStream longs() : 
		DoubleStream doubles() : 실수 범위 난수
		
3) 람다식 - iterate(), generate()
	- 무한스트림
	
	
4) 두 스트림의 연결 - concat()
	

2. 스트림의 중간 연산
1)  skip(), limit()

limit() : 갯수 제한 
skip() : 건너 뛰기

2) filter(), distinct()
 filter(Predicate<T> ...)  : 스트림을 걸러주는 기능 
 
 distinct() :  중복 제거
	- 중복 제거 기준 : equals() and hashCode()
 
 
3) sorted()
	- 정렬 : 기본 정렬 기준 java.lang.Comparable  int compareTo(...)
	- sorted(Comparator ....) 
		- 대안적인 기준 : java.util.Comparator :: int compare(....)
	
4) map()
	map(Function<T,R> ...)  : 변환 메서드 
	
	참고) 기본 자료형 스트림 변환 메서드
	IntStream mapToInt(ToIntFunction <T> ...)
	LongStream mapToLong(ToLongFunction<T> ...)
	DOubleStream mapToDouble(ToDoubleFunction<T>...)
		FlatMap
5) peek()
	- forEach와 매개변수가 동일 
	- Stream peek(Consumer<T> ... ) : 중간 연산 : 중간에 값을 확인할 경우 많이 사용 
	- void forEach(Consumer<T> ...) : 최종 연산 : 최종적으로 출력할때 사용

6) mapToInt(), mapToLong(), mapToDouble()


Optional 클래스 
- JDK8 
- null에 대한 다양한 처리 방법을 제공하는 클래스 
- Wrapper 클래스 

orElse(T other) : 값만 기본값으로 내보내기

값을 조금더 가공,처리할 필요가 있을 때 함수형 인터페이스 
orElseGet(Supplier <T> ..)

class Optional<T> {
	...
	private final T value;
	...
}


1. Optional 객체 생성하기
	static Optional<T> of(T t) : t가 null이면 오류 발생 
	static Optional<T> ofNullable(T t) : t가 null이어도 오류  발생 X 
	
2. Optional 객체의 값 가져오기
	
	T get() : null 이면 오류 발생 (NoSuchElementException)
	T orElse(T other) : null이 아니면 값 반환, null이면 other 반환 
	T orElseGet(Supplier<T ... >  ) : null 이 아니면 값 반환, null이면 Supplier :: get() 함수에서 생성한 값을 반환
									- 값에 대한 변경, 코드 추가가 필요한 경우
	T orElseThrow() : null이면 예외 발생 (NoSuchElementException 발생)
	
	T orElseThrow(Supplier<T ... > ) null 이면 Supplier 의 get 생성한 예외를 발생
	
3. OptionalInt, OptionalLong, OptionalDouble
- 기본형을 처리하는 Optional 클래스 
- 오토박싱, 언박싱이 발생 X -> 성능상의 이점 


3. 스트림의 최종 연산
- 최종 연산이 호출되어야 중간 연산도 수행, 스트림을 소비 

1) forEach()

2) allMatch(), anyMatch(), noneMatch(), findFirst(), findAny()

boolean allMatch(Predicate ... ) : 전부 참인 경우 참 
boolean anyMatch(Predicate ...) : 어떤 것이든 하나라도 참이면 참 
boolean noneMatch(Predicate ...) : 전부 거짓일때 참 
T findFirst() : 가장 첫번째 스트림의 요소를 반환 


3) count(), sum(), average(), max(), min()

4) reduce() : 합성곱 

5) collect()
	Collector
	
	java.util.stream.Collectors 
		6) toList(), toSet(), toMap(), toCollection(), toArray()
			- toMap() : 
			- toCollection() : List, Set의 하위 클래스 객체 
			
		7)  joining()

8) groupingBy(), partitioningBy()