입출력(I/O)
java.io 패키지 

1. 입출력이란?
	- Input/Output   입력 / 출력 
	- 컴퓨터 내부 또는 외부와 프로그램간의 데이터를 주고받는 것
	
2. 스트림(stream)
	- 데이터가 이동하는 통로 
	- 입력 통로(입력 스트림)
	- 출력 통로(출력 스트림)


바이트기반 스트림 : 데이터 크기가 바이트 단위 / 1바이트씩 읽어오는 스트림
1. 입력 스트림 - InputStream (2~3바이트) : 추상 클래스 
	Reader(문자단위)
	기반 스트림 : 직접 데이터에 접근해서 읽어오는 스트림 - 1바이트씩 읽어오는 형태 int read()
		FileInputStream
		ByteArrayInputStream
		
		참고)
			Unsigned : 양의 정수
			Unsigned byte 0~255
			
			입력 스트림의 끝에 도달한 경우 반환 값이 01 / 바이트 범위에서 부족 -> 더 큰 자료형
			int read()
	보조 스트림 : 다른 스트림에 추가적인 기능을 부여
		FilterInputStream : 보조스트림의 체계를 정리하기 위한 클래스
			BufferedInputStream : 버퍼 기능 추가
			DataInputStream : 기본 자료형으로 데이터를 읽을 수 있는 기능 추가
			- 한가지 자료형으로 사용하는것
			- 끝까지 다 읽은후에 읽으면 EOFException 발생 (End of File)
		ObjectInputStream : 객체 형태로 변환하여 읽어 오는 기능 추가
		java.nio(new)
	참고) InputStream System.in:표준 입력(1바이트 단위)//1바이트 단위는 한글은 무조건 깨짐
2. 출력 스트림 - OutputStream(2~3바이트) : 추상 클래스 
	Writer(문자단위)
	기반 스트림 : 직접 데이터에 접근해서 출력하는 스트림 1바이트씩 출력 void write()
	FileOutputStream
	ByteArrayInputStream
	
	보조 스트림 : 다른 스트림에 추가적인 기능을 제공 - 생성자 매개변수 OutStream 
	FilterOutputStream : 보조스트림의 체계를 정리하기 위한 클래스
		BufferedOutputStream : 출력 스트림 + 버퍼기능
		DataOutputStream : 기본 자료형으로 쓰기 기능 제공
			- 한가지 자료형으로 사용하는것
		
		
	ObjectOutputStream : 객체 형태로 데이터를 출력하는 기능 추가
	
	참고)
		데코레이터 패턴
		
		
	
문자기반 스트림 : 데이터 크기가 문자 단위(유니코드 - 2, 3 바이트)
1. 입력 스트림 - Reader : 추상 클래스 
	기반 스트림 : 데이터에 직접 접근 하는 스트림
		FileReader
		CharArrayReader
		StringReader
	보조 스트림 : 입력 스트림 + 추가기능 - 생성자 매개변수 Reader
		FilterReader
			- BufferedReader : 버퍼 기능
			- 
		InputStreamReader : 바이트 단위 스트림 -> 문자 단위 스트림으로 변환 기능
			Reader 로 사용이 불가한 InputStream 인 경우 변환
			: 생성자 매개변수 String charSetName, Charset cs : 변환하려고 하는 문자표(유니코드)
				2바이트 유니코드 : ISO8859_1/EUC-KR,CPC949
				3바이트 유니코드 : UTF-8
		String getEncoding(): 문자표의 종류
2. 출력 스트림 - Writer
	기반 스트림 : 데이터에 직접 접근하는 스트림
		FileWriter : 
		CharArrayWriter : 
		StringWriter : 
	보조 스트림 : 출력 스트림 + 추가기능 - 생성자 매개변수 Writer
	FilterWriter
		-BufferedWriter: 버퍼기능 추가 8kb
	InputStreamReader : 바이트 단위 스트림 -> 문자 단위 스트림으로 변환 기능
		: Reader로 사용이 불가한 
	
	OutputStreamWriter : 바이트 단위 스트림 -> 문자 단위 스트림으로 변환 가능		

데코레이터 패턴 

class BufferedInputStream extends InputStream{
	private InputStream in;
	public BufferedInputStream(InputStream in){
	this.in= in;
	}
//read메서드의 기능은 추가적인 기능과 함께 다른 스트림의 기능을 대신 수행
public int read(){

	//버퍼기능에 대한 코드 //추가기능
	int byte = in.read();//다른 스트림의 읽기 기능을 대신 수행
	
	//버퍼기능에 대한 코드 //추가기능
	return byte ; 
	}
}

표준입출력 : 콘솔에 입력, 출력 - JVM 생성해 주는 객체
1. System.in : InputStream / 터미널에서 입력, 바이트 단위 스트림,
							문자 단위 스트림으로 변경(InputStreamReader)
2. System.out : PrintStream : 문자 단위 출력 스트림, print(),printf(),println()
							+ 버퍼 (8kb)
3. System.err : PrintStream : 표준 에러 스트림, 글자 색이 빨간색

참고)
	PrintWriter : 문자 단위 출력 스트림 + 버퍼(8kb)
		print(), printf(),println()
PrintStream : 문자기반 스트림, 기반 스트림, 버퍼
		
File 
	- 파일, 디렉토리를 파일 객체로 생성해서 관리
	- 파일, 디렉토리에 유용한 기능... 	

	윈도우즈 : D:\경로명\파일명.확장자 -> \
	리눅스(맥) : /home/project/파일명 -> /
	
	환경변수(OS 내에서 사용가능한 변수) 구분 문자
	윈도우즈 : ;(세미콜론)
	리눅스(맥) : (콜론)
		-> File.pathSeparator
	
	쓰기, 읽기, 실행 권한
	boolean canRead() : 읽기 권한 여부 
	boolean canWrite() : 쓰기 권한 - false 이면 수정, 삭제 x
	boolean canExecute() : 실행권한
	
	void setReadable()
	void setWriteable()
	void setExecutable()
	
	void setReadOnly() : 읽기전용
	String getAbsolutePath(): 파일 전체 경로
	String getCanonicalPath(): 정규화된 파일 경로(상대 경로 -> 전체 경로 변경(absolutePath))
	
	String getName() : 파일 명
	String getPath() : 파일 경로 
직렬화(Serialization)
- 객체에 저장된 데이터를 스트림에 쓰기(write)위해 연속적인(serial) 데이터로 변환하는 것을 말한다.
- 직렬화 -> 데이터 노출 -> 위험한 작업 -> 의사표현 (Seriable 인터페이스 추가 -> 진행하겠음을 표현)
- Serialization 인터페이스 구현 (구현 내용 x - 마커 인터페이스)
-> 변환 값 : 다시 객체로 복구 할 때 필요한 항목 직렬화
	-> 객체마다 변경될 수 있는 값( 인스턴스 변수)
1. ObjectInputStream
	: 객체 형태로 읽어 오는것
	-> 객체로 복구(새로 생성 <- 객체마다 다른 데이터(인스턴스 변수 값)를 주입)
	-> 저장한 순서대로 객체를 복구 가능 -> 불편함이 발생
	-> 객체 저장시 컬렉션 프레임 워크의 List,Set,Map 활용이 편하다.
	
2. ObjectOutputStream
	: 객체 형태로 저장
	-> 객체를 복구 할 때 필요한 항목 저장
		(복구가 필요한 데이터 : 객체마다 다른 데이터 - 인스턴스 변수 