쓰레드? 작업공간
작업 메서드 + 호출 스택 : 작업대 
main - 메인쓰레드
run - 사용자 정의 스레드 : 실행시에 호출 스택이 필요하므로 별도 메서드 start() 실행
	-> 호출스택 + run () 메서드 실행

프로세스와 쓰레드
1. 개념 
1) 실행 중인 프로그램(program)
2) 프로그램을 수행하는 데 필요한 데이터와 메모리등의 자원 그리고 쓰레드로 구성
3) 프로세스의 자원을 이용해서 실제로 작업을 수행하는 것이 쓰레드이다
4) 모든 프로세스에는 최소한 하나 이상의 쓰레드가 존재하며, 둘 이상의 쓰레드를 가진 프로세스를 멀티쓰레드 프로세스(multi-threaded process)라고 한다.
5) 프로세스의 메모리 한계에 따라 생성할 수 있는 쓰레드의 수가 결정
	쓰레드 : 작업메서드 + 호출스택
			- 작업 메서드 main + main 쓰레드
2. 멀티쓰레딩
- 하나의 프로세스내에서 여러 쓰레드가 동시에 작업을 수행하는 것

3. 멀티쓰테딩의 장점
1) CPU의 사용률을 향상시킨다.
2) 자원을 보다 효율적으로 사용할 수 있다.
3) 사용자에 대한 응답성이 향상된다.
4) 작업이 분리되어 코드가 간결해진다.

4. 멀티쓰레딩의 단점
여러 쓰레드가 같은 프로세스 내에서 자원을 공유하면서 작업을 하기 때문에 발생할 수 있는 동기화(synchronization), 교착상태(deadlock)와 같은 문제를 고려해서 신중하게 프로그래밍해야 한다.


쓰레드의 구현과 실행
1. Thread클래스를 상속받는 방법과 Runnable인터페이스를 구현하는 방법
	1) Thread 클래스 상속
	2) Runnable 인터페이스 구현 -> Thread 생성자 매개변수
2. Thread클래스를 상속받으면 다른 클래스를 상속받을 수 없기 때문에 Runnable 인터페이스를 구현하는 방법이 일반적
3. 쓰레드의 실행 - start()
1) start()와 run()
	start() : 독립적인 호출 스택+ run()실행/ 병렬적인 작업이 가능
2) 실행중인 사용자 쓰레드가 하나도 없을 때 프로그램은 종료된다.


싱글쓰레드와 멀티쓰레드
시분할 방식 - 시간을 분할 하는 방식
1. 하나의 쓰레드로 두 작업을 처리하는 경우 한 작업을 마친 후에 다른 작업을 시작한다.
2. 두 개의 쓰레드로 작업하는 경우에는 짧은 시간동안 2개의 쓰레드가 번갈아 가면서 작업을 수행해서 동시에 두 작업이 처리되는 것과 같이 느끼게 한다.
3. 하나의 쓰레드로 두개의 작업을 수행한 시간과 두개의 쓰레드로 두 개의 작업을 수행한 시간은 거의 같다.
4. 오히려 두 개의 쓰레드로 작업한 시안이 싱글쓰레드로 작업한 시간보다 더 걸리게 되는데, 쓰레드간의 작업 전환(context switching)에 시간이 걸리기 때문이다.
쓰레드 생성 방법 ( 사용자 정의 쓰레드)
1. Thread 클래스 상속, run메서드를 재정의
	- 유연성에서 불리, 상속은 1개만 받기 때문에
	- 실무에서는 사용많이 하지 않는다.
	- Thread 클래스에 정의된 자원을 하위클래스에서 바로 접근 가능
2. Runnable 인터페이스 구현 -> Thread 객체 생성시 생성자 매개변수로 설정
쓰레드의 우선순위
1. 쓰레드 우선순위 지정하기
	- 우선순위가 높은 경우 - 시간 분할을 더 많이 해서 실행을 더 많이 확보
	1~10  :  10 에 가까울 수록 우선순위가 높다, 1에 가까울 수록 낮다
	setPriority (1~10)
	참고) 
		시분할 방식
쓰레드 그룹(thread group)
	- 스레드 그룹을 설정하지 않으면 모두 main 그룹
	- 우선순위 등, 그룹별로 설정, 하위 그룹도 일괄 적용
데몬 쓰레드(daemon thread)
- 메인쓰레드의 작업이 종료가 되면 함께 종료되는 쓰레드
- setDaemon(true);

쓰레드의 실행제어
1. 쓰레드와 스케줄링과 관련된 메서드
2. 쓰레드의 상태
3. sleep(long millis) 
4. interrupt()와 interrupted()
	- interrupt() : 실행정지 상태인 sleep(), join()를 다시 실행 대기 상태로 변경
		(InterruptedException발생시킴, interrupted() - true)
		
		interrupt() 호출 -> 1) isInterrupted()가 true 변경
							2) interrupted ()호출 InterruptedException도 발생,isInterrupted을 false로 변경 
5. suspend(), resume(), stop()
	suspend() : 일시정지
	resume() : 재시작
	stop() : 정지
		-> 교착상태를 유발할 가능성이 크므로 사용 지양
6. yield() : 다른 스레드에게 작업 양보
7. join() : 조인한 쓰레드가 완료되면 현재 쓰레드가 종료

쓰레드의 동기화
1. synchronized를 이용한 동기화
1) 메서드 전체를 임계영역으로 지정
2) 특정한 영역을 임계 영역으로 지정

2. volatile	