SQL문 속 또 다른 SQL문, 서브 쿼리


서브 쿼리
- SELECT 서브 쿼리(1) FROM 서브쿼리 (2) WHERE 서브쿼리 (3)

(1) 스칼라 서브쿼리
	스칼라 : 단일값
(2) 인라인 뷰 : 가상의 테이블
(3) 상관 부속 질의
1. 특징 
1) 서브 쿼리는 연산자와 같은 비교 또는 조회 대상의 오른쪽에 놓이며 괄호 ( )로 묶어서 사용합니다.
2) 특수한 몇몇 경우를 제외한 대부분의 서브쿼리에서는 ORDER BY 절을 사용할 수 없습니다.
3) 서브쿼리의 SELECT절에 명시한 열은 메인쿼리의 비교 대상과 같은 자료형과 같은 개수로 지정해야 합니다. 즉 메인쿼리의 비교 대상 데이터가 하나라면 서브쿼리의 SELECT절 역시 같은 자료형인 열을 하나 지정해야 합니다.
4) 서브쿼리에 있는 SELECT문의 결과 행 수는 함께 사용하는 메인쿼리의 연산자 종류와 호환 가능해야 합니다. 예를 들어 메인쿼리에 사용한 연산자가 단 하나의 데이터로만 연산이 가능한 연산자라면 서브쿼리의 결과 행 수는 반드시 하나여야 합니다.


실행 결과가 하나인 단일행 서브 쿼리

1. 단일행 서브 쿼리(single-row subquery)는 실행 결과가 단 하나의 행으로 나오는 서브쿼리를 뜻합니다.
2. 서브쿼리에서 출력되는 결과가 하나이므로 메인쿼리와 서브쿼리 결과는 다음과 같이 단일행 연산자를 사용하여 비교
	- 비교연산자, SELECT ... FROM 	
3. 단일행 서브쿼리와 날짜형 데이터
4. 단일행 서브쿼리와 함수


실행 결과가 여러 개인 다중행 서브 쿼리
1. 다중행 서브쿼리(multiple-row subquery)는 실행 결과 행이 여러 개로 나오는 서브쿼리를 가리킵니다.
2. 단일행 서브쿼리와 달리 서브쿼리 결과가 여러 개이므로 단일행 연산자는 사용할 수 없고 다중행 연산자를 사용해야 메인쿼리와 비교할 수 있습니다.
3. IN 연산자
	- 부서별 최대 급여 목록
4. ANY, SOME 연산자
	- 쿼리 결과 값이 하나라도 참이면 참
	- 30번 부서의 최대급여보다 적게 받는 직원 목록
5. ALL 연산자
	- 쿼리 결과 값이 모두 참 -> 참
	- 30 번 부서의 최대 급여보다 많이 받는 직원 목록
6. EXISTS 연산자
	- 서브쿼리의 레코드가 있으면 참
	- 30번 부서가 부서 테이블에 존재하면 직원 목록

비교할 열이 여러 개인 다중열 서브쿼리
1. 서브쿼리의 SELECT절에 비교할 데이터를 여러 개 지정하는 방식
2. 다중열 서브쿼리 사용하기

FROM절에 사용하는 서브쿼리와 WITH절
1. 인라인 뷰(inline view)(가상의 뷰) : 가상테이블, 서브쿼리 결과를 가지고 가상 테이블 생성
2. WITH절 사용하기
3. 상호 연관 서브쿼리
	- 메인 쿼리의 결과 데이터를 서브쿼리에서 사용

SELECT 절에 사용하는 서브쿼리
1. 스칼라 서브쿼리(scalar subquery)
스칼라 : 단일값: 단일행 서브쿼리
2. SELECT절에 서브쿼리 사용하기
3. SELECT 절에 명시하는 서브쿼리는 반드시 하나의 결과만 반환하도록 작성

조인
(JOIN)
관계 대수 + 집합
테이블간의 관계

1. 동등 조인
	(등가 조인, 내부조인(INNER JOIN))
	- 테이블 간의 공통적인 값을 가지고 연결
	- 테이블명이 동일하지 않아도 된다.
	
2. 비등가 조인
	값이 같음 여부를 가지고 조인 X, 암묵적 조인(테이블간의 관려성이 있으면 조인 되는 방식)
	SALGRADE, EMP
	
3. 자체조인 (셀프조인)
	-같은 테이블 내에서 조인
	
4. 외부 조인(OUTER JOIN)

표준 SQL조인

등가조인 (동등조인, 내부조인)
1. NATURAL JOIN 
	-공통적인 값을 가진 컬럼명이 서로 동일, 1개만 있는 경우
	
	SELECT * FROM EMP NATURAL JOIN DEPT;
	
2. (INNER) JOIN ~ USING
	- 공통적인 값을 가진 컬럼명이 서로 동일, 1개 이상인 경우 - 선택
	SELECT * FROM EMP JOIN DEPT USING(DEPTNO);
	
3. (INNER) JOIN ~ ON
	- 공통적인 값을 가진 컬럼명이 서로 동일하지 않은 경우

4. 외부 조인(OUTER JOIN)
1. 왼쪽 외부조인
	LEFT [OUTER] JOIN
	SELECT * FROM EMP_JOIN E
	LEFT JOIN DEPT_JOIN D ON E.DEPTNO = D.DEPTNO;
2. 오른쪽 외부조인
	RIGHT [OUTER]JOIN E
	RIGHT JOIN DEPT_JOIN D ON E.DEPTNO = D.DEPTNO;
	
3. FULL OUTER JOIN 